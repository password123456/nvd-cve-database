{
  "totalResults": 22,
  "datePublished": "2024-03-26T07:00:15.602987Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2023-45824",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:57.027",
        "lastModified": "2024-03-25T19:15:57.027",
        "baseScore": 4.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 1.4,
        "description": "OroPlatform is a PHP Business Application Platform (BAP).  A logged in user can access page state data of pinned pages of other users by pageId hash. This vulnerability is fixed in 5.1.4.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://github.com/oroinc/platform/commit/cf94df7595afca052796e26b299d2ce031e289cd"
          },
          {
            "url": "https://github.com/oroinc/platform/security/advisories/GHSA-vxq2-p937-3px3"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2023-48296",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:57.300",
        "lastModified": "2024-03-25T19:15:57.300",
        "baseScore": 4.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 1.4,
        "description": "OroPlatform is a PHP Business Application Platform (BAP).  Navigation history, most viewed and favorite navigation items are returned to storefront user in JSON navigation response if ID of storefront user matches ID of back-office user. This vulnerability is fixed in 5.1.4.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8"
          },
          {
            "url": "https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-27299",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:57.563",
        "lastModified": "2024-03-25T19:15:57.563",
        "baseScore": 8.8,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.8,
        "impactScore": 5.9,
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. A SQL injection vulnerability has been discovered in the the \"Add News\" functionality due to improper escaping of the email address. This allows any authenticated user with the rights to add/edit FAQ news to exploit this vulnerability to exfiltrate data, take over accounts and in some cases, even achieve RCE. The vulnerable field lies in the  `authorEmail` field which uses PHP's `FILTER_VALIDATE_EMAIL` filter. This filter is insufficient in protecting against SQL injection attacks and should still be properly escaped. However, in this version of phpMyFAQ (3.2.5), this field is not escaped properly can be used together with other fields to fully exploit the SQL injection vulnerability. This vulnerability is fixed in 3.2.6.",
        "cweIds": [
          {
            "id": "CWE-89",
            "description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          }
        ],
        "references": [
          {
            "url": "https://drive.google.com/drive/folders/1BFL8GHIBxSUxu0TneYf66KjFA0A4RZga?usp=sharing"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/1b68a5f89fb65996c56285fa636b818de8608011"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-qgxx-4xv5-6hcw"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-27300",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:57.807",
        "lastModified": "2024-03-25T19:15:57.807",
        "baseScore": 5.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.1,
        "impactScore": 3.4,
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. The `email` field in phpMyFAQ's user control panel page is vulnerable to stored XSS attacks due to the inadequacy of PHP's `FILTER_VALIDATE_EMAIL` function, which only validates the email format, not its content. This vulnerability enables an attacker to execute arbitrary client-side JavaScript within the context of another user's phpMyFAQ session. This vulnerability is fixed in 3.2.6.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/09336b0ff0e0a04aa0c97c5975651af4769d2459"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/de90315c9bd4ead5fe6ba5586f6b016843aa8209"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-q7g6-xfh2-vhpx"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28105",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:58.020",
        "lastModified": "2024-03-25T19:15:58.020",
        "baseScore": 7.2,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.2,
        "impactScore": 5.9,
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. The category image upload function in phpmyfaq is vulnerable to manipulation of the `Content-type` and `lang` parameters, allowing attackers to upload malicious files with a .php extension, potentially leading to remote code execution (RCE) on the system. This vulnerability is fixed in 3.2.6.",
        "cweIds": [
          {
            "id": "CWE-434",
            "description": "Unrestricted Upload of File with Dangerous Type"
          }
        ],
        "references": [
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/9136883776af67dfdb0e8cf14f5e0ca22bf4f2e7"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-pwh2-fpfr-x5gf"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28106",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:58.263",
        "lastModified": "2024-03-25T19:15:58.263",
        "baseScore": 4.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 0.9,
        "impactScore": 3.4,
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. By manipulating the news parameter in a POST request, an attacker can inject malicious JavaScript code. Upon browsing to the compromised news page, the XSS payload triggers. This vulnerability is fixed in 3.2.6.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/c94b3deadd87789389e1fad162bc3dd595c0e15a"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-6p68-36m6-392r"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28107",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:58.477",
        "lastModified": "2024-03-25T19:15:58.477",
        "baseScore": 8.8,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.8,
        "impactScore": 5.9,
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases.  A SQL injection vulnerability has been discovered in the `insertentry` & `saveentry` when modifying records due to improper escaping of the email address. This allows any authenticated user with the rights to add/edit FAQ news to exploit this vulnerability to exfiltrate data, take over accounts and in some cases, even achieve RCE. This vulnerability is fixed in 3.2.6.",
        "cweIds": [
          {
            "id": "CWE-89",
            "description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/d0fae62a72615d809e6710861c1a7f67ac893007"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-2grw-mc9r-822r"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28108",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:58.700",
        "lastModified": "2024-03-25T19:15:58.700",
        "baseScore": 4.7,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 2.7,
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. Due to insufficient validation on the `contentLink` parameter, it is possible for unauthenticated users to inject HTML code to the page which might affect other users. _Also, requires that adding new FAQs is allowed for guests and that the admin doesn't check the content of a newly added FAQ._ This vulnerability is fixed in 3.2.6.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          },
          {
            "id": "CWE-80",
            "description": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)"
          }
        ],
        "references": [
          {
            "url": "https://github.com/thorsten/phpMyFAQ/commit/4fed1d9602f0635260f789fe85995789d94d6634"
          },
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-48vw-jpf8-hwqh"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28850",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T19:15:58.947",
        "lastModified": "2024-03-25T19:15:58.947",
        "baseScore": 8.1,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.4,
        "impactScore": 6.0,
        "description": "WP Crontrol controls the cron events on WordPress websites.  WP Crontrol includes a feature that allows administrative users to create events in the WP-Cron system that store and execute PHP code subject to the restrictive security permissions documented here. While there is no known vulnerability in this feature on its own, there exists potential for this feature to be vulnerable to RCE if it were specifically targeted via vulnerability chaining that exploited a separate SQLi (or similar) vulnerability. This is exploitable on a site if one of the below preconditions are met, the site is vulnerable to a writeable SQLi vulnerability in any plugin, theme, or WordPress core, the site's database is compromised at the hosting level, the site is vulnerable to a method of updating arbitrary options in the wp_options table, or the site is vulnerable to a method of triggering an arbitrary action, filter, or function with control of the parameters.  As a hardening measure, WP Crontrol version 1.16.2 ships with a new feature that prevents tampering of the code stored in a PHP cron event.",
        "cweIds": [
          {
            "id": "CWE-494",
            "description": "Download of Code Without Integrity Check"
          }
        ],
        "references": [
          {
            "url": "https://github.com/johnbillion/wp-crontrol/releases/tag/1.16.2"
          },
          {
            "url": "https://github.com/johnbillion/wp-crontrol/security/advisories/GHSA-9xvf-cjvf-ff5q"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29515",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-03-25T19:15:59.190",
        "lastModified": "2024-03-25T19:15:59.190",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "File Upload vulnerability in lepton v.7.1.0 allows a remote authenticated attackers to execute arbitrary code via uploading a crafted PHP file to the save.php and config.php component.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/zzq66/cve7/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29666",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-03-25T19:15:59.253",
        "lastModified": "2024-03-25T19:15:59.253",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "Insecure Permissions vulnerability in Vehicle Monitoring platform system CMSV6 v.7.31.0.2 through v.7.32.0.3 allows a remote attacker to escalate privileges via the default password component.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/whgojp/cve-reports/wiki/There-is-a-weak-password-in-the-CMSV6-vehicle-monitoring-platform-system"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28243",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T20:15:07.950",
        "lastModified": "2024-03-25T20:15:07.950",
        "baseScore": 6.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 3.6,
        "description": "KaTeX is a JavaScript library for TeX math rendering on the web. KaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\edef` that causes a near-infinite loop, despite setting `maxExpand` to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow. Upgrade to KaTeX v0.16.10 to remove this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-674",
            "description": "Uncontrolled Recursion"
          }
        ],
        "references": [
          {
            "url": "https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34"
          },
          {
            "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28244",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T20:15:08.160",
        "lastModified": "2024-03-25T20:15:08.160",
        "baseScore": 6.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 3.6,
        "description": "KaTeX is a JavaScript library for TeX math rendering on the web. KaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\def` or `\\newcommand` that causes a near-infinite loop, despite setting `maxExpand` to avoid such loops. KaTeX supports an option named maxExpand which aims to prevent infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. Unfortunately, support for \"Unicode (sub|super)script characters\" allows an attacker to bypass this limit. Each sub/superscript group instantiated a separate Parser with its own limit on macro executions, without inheriting the current count of macro executions from its parent. This has been corrected in KaTeX v0.16.10.",
        "cweIds": [
          {
            "id": "CWE-674",
            "description": "Uncontrolled Recursion"
          }
        ],
        "references": [
          {
            "url": "https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2"
          },
          {
            "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28245",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T20:15:08.370",
        "lastModified": "2024-03-25T20:15:08.370",
        "baseScore": 6.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 3.4,
        "description": "KaTeX is a JavaScript library for TeX math rendering on the web. KaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\includegraphics` that runs arbitrary JavaScript, or generate invalid HTML. Upgrade to KaTeX v0.16.10 to remove this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-116",
            "description": "Improper Encoding or Escaping of Output"
          }
        ],
        "references": [
          {
            "url": "https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770"
          },
          {
            "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28246",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T20:15:08.580",
        "lastModified": "2024-03-25T20:15:08.580",
        "baseScore": 5.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.1,
        "impactScore": 3.4,
        "description": "KaTeX is a JavaScript library for TeX math rendering on the web. Code that uses KaTeX's `trust` option, specifically that provides a function to blacklist certain URL protocols, can be fooled by URLs in malicious inputs that use uppercase characters in the protocol. In particular, this can allow for malicious input to generate `javascript:` links in the output, even if the `trust` function tries to forbid this protocol via `trust: (context) => context.protocol !== 'javascript'`. Upgrade to KaTeX v0.16.10 to remove this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-184",
            "description": "Incomplete List of Disallowed Inputs"
          },
          {
            "id": "CWE-697",
            "description": "Incorrect Comparison"
          }
        ],
        "references": [
          {
            "url": "https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de"
          },
          {
            "url": "https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29025",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T20:15:08.797",
        "lastModified": "2024-03-25T20:15:08.797",
        "baseScore": 5.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.9,
        "impactScore": 1.4,
        "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.",
        "cweIds": [
          {
            "id": "CWE-770",
            "description": "Allocation of Resources Without Limits or Throttling"
          }
        ],
        "references": [
          {
            "url": "https://gist.github.com/vietj/f558b8ea81ec6505f1e9a6ca283c9ae3"
          },
          {
            "url": "https://github.com/netty/netty/commit/0d0c6ed782d13d423586ad0c71737b2c7d02058c"
          },
          {
            "url": "https://github.com/netty/netty/security/advisories/GHSA-5jpm-x58v-624v"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29041",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T21:15:46.847",
        "lastModified": "2024-03-25T21:15:46.847",
        "baseScore": 6.1,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 2.7,
        "description": "Express.js minimalist web framework for node. Versions of Express.js prior to 4.19.0 and all pre-release alpha and beta versions of 5.0 are affected by an open redirect vulnerability using malformed URLs. When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list. The main method impacted is `res.location()` but this is also called from within `res.redirect()`. The vulnerability is fixed in 4.19.2 and 5.0.0-beta.3.",
        "cweIds": [
          {
            "id": "CWE-1286",
            "description": "Improper Validation of Syntactic Correctness of Input"
          },
          {
            "id": "CWE-601",
            "description": "URL Redirection to Untrusted Site ('Open Redirect')"
          }
        ],
        "references": [
          {
            "url": "https://expressjs.com/en/4x/api.html#res.location"
          },
          {
            "url": "https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd"
          },
          {
            "url": "https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94"
          },
          {
            "url": "https://github.com/expressjs/express/pull/5539"
          },
          {
            "url": "https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc"
          },
          {
            "url": "https://github.com/koajs/koa/issues/1800"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29179",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-03-25T21:15:47.050",
        "lastModified": "2024-03-25T21:15:47.050",
        "baseScore": "",
        "baseSeverity": "",
        "exploitabilityScore": "",
        "impactScore": "",
        "description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. An attacker with admin privileges can upload an attachment containing JS code without extension and the application will render it as HTML which allows for XSS attacks.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-hm8r-95g3-5hj9"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29440",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-03-25T21:15:47.217",
        "lastModified": "2024-03-25T21:15:47.217",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "An unauthorized access vulnerability has been discovered in ROS2 Humble Hawksbill versions where ROS_VERSION is 2 and ROS_PYTHON_VERSION is 3. This vulnerability could potentially allow a malicious user to gain unauthorized access to multiple ROS2 nodes remotely. Unauthorized access to these nodes could result in compromised system integrity, the execution of arbitrary commands, and disclosure of sensitive information.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/yashpatelphd/CVE-2024-29440"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-2425",
        "sourceIdentifier": "PSIRT@rockwellautomation.com",
        "published": "2024-03-25T21:15:47.273",
        "lastModified": "2024-03-25T21:15:47.273",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "A denial-of-service vulnerability exists in the Rockwell Automation PowerFlex® 527 due to improper input validation in the device. If exploited, the web server will crash and need a manual restart to recover it.",
        "cweIds": [
          {
            "id": "CWE-20",
            "description": "Improper Input Validation"
          }
        ],
        "references": [
          {
            "url": "https://https://www.rockwellautomation.com/en-us/support/advisory.SD1664.html"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-2426",
        "sourceIdentifier": "PSIRT@rockwellautomation.com",
        "published": "2024-03-25T21:15:47.480",
        "lastModified": "2024-03-25T21:15:47.480",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "A denial-of-service vulnerability exists in the Rockwell Automation PowerFlex® 527 due to improper input validation in the device. If exploited, a disruption in the CIP communication will occur and a manual restart will be required by the user to recover it.",
        "cweIds": [
          {
            "id": "CWE-20",
            "description": "Improper Input Validation"
          }
        ],
        "references": [
          {
            "url": "https://www.rockwellautomation.com/en-us/support/advisory.SD1664.html"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-2427",
        "sourceIdentifier": "PSIRT@rockwellautomation.com",
        "published": "2024-03-25T21:15:47.660",
        "lastModified": "2024-03-25T21:15:47.660",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "A denial-of-service vulnerability exists in the Rockwell Automation PowerFlex® 527 due to improper traffic throttling in the device. If multiple data packets are sent to the device repeatedly the device will crash and require a manual restart to recover.",
        "cweIds": [
          {
            "id": "CWE-20",
            "description": "Improper Input Validation"
          }
        ],
        "references": [
          {
            "url": "https://www.rockwellautomation.com/en-us/support/advisory.SD1664.html"
          }
        ]
      }
    }
  ]
}