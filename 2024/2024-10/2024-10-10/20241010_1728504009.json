{
  "totalResults": 10,
  "datePublished": "2024-10-10T05:00:09.912447Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-47763",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T18:15:08.863",
        "lastModified": "2024-10-09T18:15:08.863",
        "baseScore": 5.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.8,
        "impactScore": 3.6,
        "description": "Wasmtime is an open source runtime for WebAssembly. Wasmtime's implementation of WebAssembly tail calls combined with stack traces can result in a runtime crash in certain WebAssembly modules. The runtime crash may be undefined behavior if Wasmtime was compiled with Rust 1.80 or prior. The runtime crash is a deterministic process abort when Wasmtime is compiled with Rust 1.81 and later. WebAssembly tail calls are a proposal which relatively recently reached stage 4 in the standardization process. Wasmtime first enabled support for tail calls by default in Wasmtime 21.0.0, although that release contained a bug where it was only on-by-default for some configurations. In Wasmtime 22.0.0 tail calls were enabled by default for all configurations. The specific crash happens when an exported function in a WebAssembly module (or component) performs a `return_call` (or `return_call_indirect` or `return_call_ref`) to an imported host function which captures a stack trace (for example, the host function raises a trap). In this situation, the stack-walking code previously assumed there was always at least one WebAssembly frame on the stack but with tail calls that is no longer true. With the tail-call proposal it's possible to have an entry trampoline appear as if it directly called the exit trampoline. This situation triggers an internal assert in the stack-walking code which raises a Rust `panic!()`. When Wasmtime is compiled with Rust versions 1.80 and prior this means that an `extern \"C\"` function in Rust is raising a `panic!()`. This is technically undefined behavior and typically manifests as a process abort when the unwinder fails to unwind Cranelift-generated frames. When Wasmtime is compiled with Rust versions 1.81 and later this panic becomes a deterministic process abort. Overall the impact of this issue is that this is a denial-of-service vector where a malicious WebAssembly module or component can cause the host to crash. There is no other impact at this time other than availability of a service as the result of the crash is always a crash and no more. This issue was discovered by routine fuzzing performed by the Wasmtime project via Google's OSS-Fuzz infrastructure. We have no evidence that it has ever been exploited by an attacker in the wild. All versions of Wasmtime which have tail calls enabled by default have been patched: * 21.0.x - patched in 21.0.2 * 22.0.x - patched in 22.0.1 * 23.0.x - patched in 23.0.3  * 24.0.x - patched in 24.0.1 * 25.0.x - patched in 25.0.2. Wasmtime versions from 12.0.x (the first release with experimental tail call support) to 20.0.x (the last release with tail-calls off-by-default) have support for tail calls but the support is disabled by default. These versions are not affected in their default configurations, but users who explicitly enabled tail call support will need to either disable tail call support or upgrade to a patched version of Wasmtime. The main workaround for this issue is to disable tail support for tail calls in Wasmtime, for example with `Config::wasm_tail_call(false)`. Users are otherwise encouraged to upgrade to patched versions.",
        "cweIds": [
          {
            "id": "CWE-670",
            "description": "Always-Incorrect Control Flow Implementation"
          }
        ],
        "references": [
          {
            "url": "https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_tail_call"
          },
          {
            "url": "https://github.com/WebAssembly/proposals"
          },
          {
            "url": "https://github.com/bytecodealliance/wasmtime/pull/8540"
          },
          {
            "url": "https://github.com/bytecodealliance/wasmtime/pull/8682"
          },
          {
            "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q8hx-mm92-4wvg"
          },
          {
            "url": "https://github.com/webassembly/tail-call"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47813",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T18:15:09.120",
        "lastModified": "2024-10-09T18:15:09.120",
        "baseScore": 2.9,
        "baseSeverity": "LOW",
        "exploitabilityScore": 0.3,
        "impactScore": 2.5,
        "description": "Wasmtime is an open source runtime for WebAssembly. Under certain concurrent event orderings, a `wasmtime::Engine`'s internal type registry was susceptible to double-unregistration bugs due to a race condition, leading to panics and potentially type registry corruption. That registry corruption could, following an additional and particular sequence of concurrent events, lead to violations of WebAssembly's control-flow integrity (CFI) and type safety. Users that do not use `wasmtime::Engine` across multiple threads are not affected. Users that only create new modules across threads over time are additionally not affected. Reproducing this bug requires creating and dropping multiple type instances (such as `wasmtime::FuncType` or `wasmtime::ArrayType`) concurrently on multiple threads, where all types are associated with the same `wasmtime::Engine`. **Wasm guests cannot trigger this bug.** See the \"References\" section below for a list of Wasmtime types-related APIs that are affected. Wasmtime maintains an internal registry of types within a `wasmtime::Engine` and an engine is shareable across threads. Types can be created and referenced through creation of a `wasmtime::Module`, creation of `wasmtime::FuncType`, or a number of other APIs where the host creates a function (see \"References\" below). Each of these cases interacts with an engine to deduplicate type information and manage type indices that are used to implement type checks in WebAssembly's `call_indirect` function, for example. This bug is a race condition in this management where the internal type registry could be corrupted to trigger an assert or contain invalid state. Wasmtime's internal representation of a type has individual types (e.g. one-per-host-function) maintain a registration count of how many time it's been used. Types additionally have state within an engine behind a read-write lock such as lookup/deduplication information. The race here is a time-of-check versus time-of-use (TOCTOU) bug where one thread atomically decrements a type entry's registration count, observes zero registrations, and then acquires a lock in order to unregister that entry. However, between when this first thread observed the zero-registration count and when it acquires that lock, another thread could perform the following sequence of events: re-register another copy of the type, which deduplicates to that same entry, resurrecting it and incrementing its registration count; then drop the type and decrement its registration count; observe that the registration count is now zero; acquire the type registry lock; and finally unregister the type. Now, when the original thread finally acquires the lock and unregisters the entry, it is the second time this entry has been unregistered. This bug was originally introduced in Wasmtime 19's development of the WebAssembly GC proposal. This bug affects users who are not using the GC proposal, however, and affects Wasmtime in its default configuration even when the GC proposal is disabled. Wasmtime users using 19.0.0 and after are all affected by this issue. We have released the following Wasmtime versions, all of which have a fix for this bug: * 21.0.2 * 22.0.1 * 23.0.3 * 24.0.1 * 25.0.2. If your application creates and drops Wasmtime types on multiple threads concurrently, there are no known workarounds. Users are encouraged to upgrade to a patched release.",
        "cweIds": [
          {
            "id": "CWE-367",
            "description": "Time-of-check Time-of-use (TOCTOU) Race Condition"
          }
        ],
        "references": [
          {
            "url": "https://github.com/bytecodealliance/wasmtime/pull/7969"
          },
          {
            "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-7qmx-3fpx-r45m"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3656",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2024-10-09T19:15:13.547",
        "lastModified": "2024-10-09T19:15:13.547",
        "baseScore": 8.1,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.8,
        "impactScore": 5.2,
        "description": "A flaw was found in Keycloak. Certain endpoints in Keycloak's admin REST API allow low-privilege users to access administrative functionalities. This flaw allows users to perform actions reserved for administrators, potentially leading to data breaches or system compromise.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://access.redhat.com/security/cve/CVE-2024-3656"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2274403"
          },
          {
            "url": "https://github.com/advisories/GHSA-2cww-fgmg-4jqc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47812",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T19:15:13.803",
        "lastModified": "2024-10-09T19:15:13.803",
        "baseScore": 6.0,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.2,
        "impactScore": 4.7,
        "description": "ImportDump is an extension for mediawiki designed to automate user import requests. Anyone who can edit the interface strings of a wiki (typically administrators and interface admins) can embed XSS payloads in the messages for dates, and thus XSS anyone who views Special:RequestImportQueue. This issue has been patched in commit `d054b95` and all users are advised to apply this commit to their branch. Users unable to upgrade may either Prevent access to Special:RequestImportQueue on all wikis, except for the global wiki; and If an interface administrator (or equivalent) level protection is available (which is not provided by default) on the global wiki, protect the affected messages up to that level. This causes the XSS to be virtually useless as users with those rights can already edit Javascript pages. Or Prevent access to Special:RequestImportQueue altogether.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          },
          {
            "id": "CWE-80",
            "description": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)"
          }
        ],
        "references": [
          {
            "url": "https://github.com/miraheze/ImportDump/commit/d054b9529129af79d4426df24faa80014cb16602"
          },
          {
            "url": "https://github.com/miraheze/ImportDump/security/advisories/GHSA-465h-45v4-6fx9"
          },
          {
            "url": "https://issue-tracker.miraheze.org/T12698"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47815",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T19:15:14.023",
        "lastModified": "2024-10-09T19:15:14.023",
        "baseScore": 6.0,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.2,
        "impactScore": 4.7,
        "description": "IncidentReporting is a MediaWiki extension for moving incident reports from wikitext to database tables. There are a variety of Cross-site Scripting issues, though all of them require elevated permissions. Some are available to anyone who has the `editincidents` right, some are available to those who can edit interface messages (typically administrators and interface admins), and one is available to those who can edit LocalSettings.php. These issues have been addressed in commit `43896a4` and all users are advised to upgrade. Users unable to upgrade should prevent access to the Special:IncidentReports page.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          },
          {
            "id": "CWE-80",
            "description": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)"
          }
        ],
        "references": [
          {
            "url": "https://github.com/miraheze/IncidentReporting/commit/43896a47de4e05ac94ec0472c220da944da16c5c"
          },
          {
            "url": "https://github.com/miraheze/IncidentReporting/security/advisories/GHSA-9p36-hrmr-98r9"
          },
          {
            "url": "https://issue-tracker.miraheze.org/T12702"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47816",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T19:15:14.227",
        "lastModified": "2024-10-09T19:15:14.227",
        "baseScore": 6.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 4.7,
        "description": "ImportDump is a mediawiki extension designed to automate user import requests. A user's local actor ID is stored in the database to tell who made what requests. Therefore, if a user on another wiki happens to have the same actor ID as someone on the central wiki, the user on the other wiki can act as if they're the original wiki requester. This can be abused to create new comments, edit the request, and view the request if it's marked private. This issue has been addressed in commit `5c91dfc` and all users are advised to update. Users unable to update may disable the special page outside of their global wiki. See `miraheze/mw-config@e566499` for details on that.",
        "cweIds": [
          {
            "id": "CWE-282",
            "description": "Improper Ownership Management"
          }
        ],
        "references": [
          {
            "url": "https://github.com/miraheze/ImportDump/commit/5c91dfce78320e717516ee65ef5a05f01979ee6c"
          },
          {
            "url": "https://github.com/miraheze/ImportDump/security/advisories/GHSA-jjmq-mg36-6387"
          },
          {
            "url": "https://github.com/miraheze/mw-config/commit/e5664995fbb8644f9a80b450b4326194f20f9ddc"
          },
          {
            "url": "https://issue-tracker.miraheze.org/T12701"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47828",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T19:15:14.423",
        "lastModified": "2024-10-09T19:15:14.423",
        "baseScore": 5.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 3.6,
        "description": "ampache is a web based audio/video streaming application and file manager. A CSRF attack can be performed in order to delete objects (Playlist, smartlist etc.). Cross-Site Request Forgery (CSRF) is an attack that forces authenticated users to submit a request to a Web application against which they are currently authenticated. This vulnerability can be exploited by creating a malicious script with an arbitrary playlist ID belonging to another user. When the user submits the request, their playlist will be deleted. Any User with active sessions who are tricked into submitting a malicious request are impacted, as their playlists or other objects could be deleted without their consent.",
        "cweIds": [
          {
            "id": "CWE-352",
            "description": "Cross-Site Request Forgery (CSRF)"
          }
        ],
        "references": [
          {
            "url": "https://github.com/ampache/ampache/security/advisories/GHSA-p9cq-2qph-55f2"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47832",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T19:15:14.647",
        "lastModified": "2024-10-09T19:15:14.647",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "ssoready is a single sign on provider implemented via docker. Affected versions are vulnerable to XML signature bypass attacks. An attacker can carry out signature bypass if you have access to certain IDP-signed messages. The underlying mechanism exploits differential behavior between XML parsers. Users of https://ssoready.com, the public hosted instance of SSOReady, are unaffected. We advise folks who self-host SSOReady to upgrade to 7f92a06 or later. Do so by updating your SSOReady Docker images from sha-... to sha-7f92a06. There are no known workarounds for this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-347",
            "description": "Improper Verification of Cryptographic Signature"
          }
        ],
        "references": [
          {
            "url": "https://github.com/ssoready/ssoready/commit/7f92a0630439972fcbefa8c7eafe8c144bd89915"
          },
          {
            "url": "https://github.com/ssoready/ssoready/security/advisories/GHSA-j2hr-q93x-gxvh"
          },
          {
            "url": "https://ssoready.com/docs/self-hosting/self-hosting-sso-ready"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-47833",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-10-09T19:15:14.793",
        "lastModified": "2024-10-09T19:15:14.793",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "Taipy is an open-source Python library for easy, end-to-end application development for data scientists and machine learning engineers. In affected versions session cookies are served without Secure and HTTPOnly flags. This issue has been addressed in release version 4.0.0 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-1004",
            "description": "Sensitive Cookie Without 'HttpOnly' Flag"
          },
          {
            "id": "CWE-614",
            "description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"
          }
        ],
        "references": [
          {
            "url": "https://github.com/Avaiga/taipy/security/advisories/GHSA-r3jq-4r5c-j9hp"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-7038",
        "sourceIdentifier": "security@huntr.dev",
        "published": "2024-10-09T19:15:14.930",
        "lastModified": "2024-10-09T19:15:14.930",
        "baseScore": 2.7,
        "baseSeverity": "LOW",
        "exploitabilityScore": 1.2,
        "impactScore": 1.4,
        "description": "An information disclosure vulnerability exists in open-webui version 0.3.8. The vulnerability is related to the embedding model update feature under admin settings. When a user updates the model path, the system checks if the file exists and provides different error messages based on the existence and configuration of the file. This behavior allows an attacker to enumerate file names and traverse directories by observing the error messages, leading to potential exposure of sensitive information.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://huntr.com/bounties/f42cf72a-8015-44a6-81a9-c6332ef05afc"
          }
        ]
      }
    }
  ]
}