{
  "totalResults": 11,
  "datePublished": "2024-07-10T19:00:06.201488Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2023-6813",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-07-10T08:15:10.760",
        "lastModified": "2024-07-10T08:15:10.760",
        "baseScore": 6.1,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 2.7,
        "description": "The Login by Auth0 plugin for WordPress is vulnerable to Reflected Cross-Site Scripting via the ‘wle’ parameter in all versions up to, and including, 4.6.0 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that execute if they can successfully trick a user into performing an action such as clicking on a link.",
        "cweIds": null,
        "references": [
          {
            "url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3114611%40auth0&new=3114611%40auth0&sfp_email=&sfph_mail="
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/0c4e0d48-fde1-45dd-8e06-4582cf677579?source=cve"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-39488",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-10T08:15:11.003",
        "lastModified": "2024-07-10T08:15:11.003",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\narm64: asm-bug: Add .align 2 to the end of __BUG_ENTRY\nWhen CONFIG_DEBUG_BUGVERBOSE=n, we fail to add necessary padding bytes\nto bug_table entries, and as a result the last entry in a bug table will\nbe ignored, potentially leading to an unexpected panic(). All prior\nentries in the table will be handled correctly.\nThe arm64 ABI requires that struct fields of up to 8 bytes are\nnaturally-aligned, with padding added within a struct such that struct\nare suitably aligned within arrays.\nWhen CONFIG_DEBUG_BUGVERPOSE=y, the layout of a bug_entry is:\n\tstruct bug_entry {\n\t\tsigned int      bug_addr_disp;\t// 4 bytes\n\t\tsigned int      file_disp;\t// 4 bytes\n\t\tunsigned short  line;\t\t// 2 bytes\n\t\tunsigned short  flags;\t\t// 2 bytes\n\t}\n... with 12 bytes total, requiring 4-byte alignment.\nWhen CONFIG_DEBUG_BUGVERBOSE=n, the layout of a bug_entry is:\n\tstruct bug_entry {\n\t\tsigned int      bug_addr_disp;\t// 4 bytes\n\t\tunsigned short  flags;\t\t// 2 bytes\n\t\t< implicit padding >\t\t// 2 bytes\n\t}\n... with 8 bytes total, with 6 bytes of data and 2 bytes of trailing\npadding, requiring 4-byte alginment.\nWhen we create a bug_entry in assembly, we align the start of the entry\nto 4 bytes, which implicitly handles padding for any prior entries.\nHowever, we do not align the end of the entry, and so when\nCONFIG_DEBUG_BUGVERBOSE=n, the final entry lacks the trailing padding\nbytes.\nFor the main kernel image this is not a problem as find_bug() doesn't\ndepend on the trailing padding bytes when searching for entries:\n\tfor (bug = __start___bug_table; bug < __stop___bug_table; ++bug)\n\t\tif (bugaddr == bug_addr(bug))\n\t\t\treturn bug;\nHowever for modules, module_bug_finalize() depends on the trailing\nbytes when calculating the number of entries:\n\tmod->num_bugs = sechdrs[i].sh_size / sizeof(struct bug_entry);\n... and as the last bug_entry lacks the necessary padding bytes, this entry\nwill not be counted, e.g. in the case of a single entry:\n\tsechdrs[i].sh_size == 6\n\tsizeof(struct bug_entry) == 8;\n\tsechdrs[i].sh_size / sizeof(struct bug_entry) == 0;\nConsequently module_find_bug() will miss the last bug_entry when it does:\n\tfor (i = 0; i < mod->num_bugs; ++i, ++bug)\n\t\tif (bugaddr == bug_addr(bug))\n\t\t\tgoto out;\n... which can lead to a kenrel panic due to an unhandled bug.\nThis can be demonstrated with the following module:\n\tstatic int __init buginit(void)\n\t{\n\t\tWARN(1, \"hello\\n\");\n\t\treturn 0;\n\t}\n\tstatic void __exit bugexit(void)\n\t{\n\t}\n\tmodule_init(buginit);\n\tmodule_exit(bugexit);\n\tMODULE_LICENSE(\"GPL\");\n... which will trigger a kernel panic when loaded:\n\t------------[ cut here ]------------\n\thello\n\tUnexpected kernel BRK exception at EL1\n\tInternal error: BRK handler: 00000000f2000800 [#1] PREEMPT SMP\n\tModules linked in: hello(O+)\n\tCPU: 0 PID: 50 Comm: insmod Tainted: G           O       6.9.1 #8\n\tHardware name: linux,dummy-virt (DT)\n\tpstate: 60400005 (nZCv daif +PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n\tpc : buginit+0x18/0x1000 [hello]\n\tlr : buginit+0x18/0x1000 [hello]\n\tsp : ffff800080533ae0\n\tx29: ffff800080533ae0 x28: 0000000000000000 x27: 0000000000000000\n\tx26: ffffaba8c4e70510 x25: ffff800080533c30 x24: ffffaba8c4a28a58\n\tx23: 0000000000000000 x22: 0000000000000000 x21: ffff3947c0eab3c0\n\tx20: ffffaba8c4e3f000 x19: ffffaba846464000 x18: 0000000000000006\n\tx17: 0000000000000000 x16: ffffaba8c2492834 x15: 0720072007200720\n\tx14: 0720072007200720 x13: ffffaba8c49b27c8 x12: 0000000000000312\n\tx11: 0000000000000106 x10: ffffaba8c4a0a7c8 x9 : ffffaba8c49b27c8\n\tx8 : 00000000ffffefff x7 : ffffaba8c4a0a7c8 x6 : 80000000fffff000\n\tx5 : 0000000000000107 x4 : 0000000000000000 x3 : 0000000000000000\n\tx2 : 0000000000000000 x1 : 0000000000000000 x0 : ffff3947c0eab3c0\n\tCall trace:\n\t buginit+0x18/0x1000 [hello]\n\t do_one_initcall+0x80/0x1c8\n\t do_init_module+0x60/0x218\n\t load_module+0x1ba4/0x1d70\n\t __do_sys_init_module+0x198/0x1d0\n\t __arm64_sys_init_module+0x1c/0x28\n\t invoke_syscall+0x48/0x114\n\t el0_svc\n---truncated---",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/22469a0335a1a1a690349b58bcb55822457df81e"
          },
          {
            "url": "https://git.kernel.org/stable/c/3fd487ffaa697ddb05af78a75aaaddabe71c52b0"
          },
          {
            "url": "https://git.kernel.org/stable/c/461a760d578b2b2c2faac3040b6b7c77baf128f8"
          },
          {
            "url": "https://git.kernel.org/stable/c/9f2ad88f9b349554f64e4037ec185c84d7dd9c7d"
          },
          {
            "url": "https://git.kernel.org/stable/c/c1929c041a262a4a27265db8dce3619c92aa678c"
          },
          {
            "url": "https://git.kernel.org/stable/c/c27a2f7668e215c1ebbccd96fab27a220a93f1f7"
          },
          {
            "url": "https://git.kernel.org/stable/c/f221bd58db0f6ca087ac0392284f6bce21f4f8ea"
          },
          {
            "url": "https://git.kernel.org/stable/c/ffbf4fb9b5c12ff878a10ea17997147ea4ebea6f"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-39489",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-10T08:15:11.110",
        "lastModified": "2024-07-10T08:15:11.110",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\nipv6: sr: fix memleak in seg6_hmac_init_algo\nseg6_hmac_init_algo returns without cleaning up the previous allocations\nif one fails, so it's going to leak all that memory and the crypto tfms.\nUpdate seg6_hmac_exit to only free the memory when allocated, so we can\nreuse the code directly.",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/0e44d6cbe8de983470c3d2f978649783384fdcb6"
          },
          {
            "url": "https://git.kernel.org/stable/c/4a3fcf53725b70010d1cf869a2ba549fed6b8fb3"
          },
          {
            "url": "https://git.kernel.org/stable/c/599a5654215092ac22bfc453f4fd3959c55ea821"
          },
          {
            "url": "https://git.kernel.org/stable/c/61d31ac85b4572d11f8071855c0ccb4f32d76c0c"
          },
          {
            "url": "https://git.kernel.org/stable/c/afd5730969aec960a2fee4e5ee839a6014643976"
          },
          {
            "url": "https://git.kernel.org/stable/c/daf341e0a2318b813427d5a78788c86f4a7f02be"
          },
          {
            "url": "https://git.kernel.org/stable/c/efb9f4f19f8e37fde43dfecebc80292d179f56c6"
          },
          {
            "url": "https://git.kernel.org/stable/c/f6a99ef4e056c20a138a95cc51332b2b96c8f383"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-39490",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-10T08:15:11.203",
        "lastModified": "2024-07-10T08:15:11.203",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\nipv6: sr: fix missing sk_buff release in seg6_input_core\nThe seg6_input() function is responsible for adding the SRH into a\npacket, delegating the operation to the seg6_input_core(). This function\nuses the skb_cow_head() to ensure that there is sufficient headroom in\nthe sk_buff for accommodating the link-layer header.\nIn the event that the skb_cow_header() function fails, the\nseg6_input_core() catches the error but it does not release the sk_buff,\nwhich will result in a memory leak.\nThis issue was introduced in commit af3b5158b89d (\"ipv6: sr: fix BUG due\nto headroom too small after SRH push\") and persists even after commit\n7a3f5b0de364 (\"netfilter: add netfilter hooks to SRv6 data plane\"),\nwhere the entire seg6_input() code was refactored to deal with netfilter\nhooks.\nThe proposed patch addresses the identified memory leak by requiring the\nseg6_input_core() function to release the sk_buff in the event that\nskb_cow_head() fails.",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/5447f9708d9e4c17a647b16a9cb29e9e02820bd9"
          },
          {
            "url": "https://git.kernel.org/stable/c/8f1fc3b86eaea70be6abcae2e9aa7e7b99453864"
          },
          {
            "url": "https://git.kernel.org/stable/c/e8688218e38111ace457509d8f0cad75f79c1a7a"
          },
          {
            "url": "https://git.kernel.org/stable/c/f4df8c7670a73752201cbde215254598efdf6ce8"
          },
          {
            "url": "https://git.kernel.org/stable/c/f5fec1588642e415a3d72e02140160661b303940"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-39491",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-10T08:15:11.287",
        "lastModified": "2024-07-10T08:15:11.287",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\nALSA: hda: cs35l56: Fix lifetime of cs_dsp instance\nThe cs_dsp instance is initialized in the driver probe() so it\nshould be freed in the driver remove(). Also fix a missing call\nto cs_dsp_remove() in the error path of cs35l56_hda_common_probe().\nThe call to cs_dsp_remove() was being done in the component unbind\ncallback cs35l56_hda_unbind(). This meant that if the driver was\nunbound and then re-bound it would be using an uninitialized cs_dsp\ninstance.\nIt is best to initialize the cs_dsp instance in probe() so that it\ncan return an error if it fails. The component binding API doesn't\nhave any error handling so there's no way to handle a failure if\ncs_dsp was initialized in the bind.",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/60d5e087e5f334475b032ad7e6ad849fb998f303"
          },
          {
            "url": "https://git.kernel.org/stable/c/9054c474f9c219e58a441e401c0e6e38fe713ff1"
          },
          {
            "url": "https://git.kernel.org/stable/c/d344873c4cbde249b7152d36a273bcc45864001e"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-39492",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-10T08:15:11.360",
        "lastModified": "2024-07-10T08:15:11.360",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\nmailbox: mtk-cmdq: Fix pm_runtime_get_sync() warning in mbox shutdown\nThe return value of pm_runtime_get_sync() in cmdq_mbox_shutdown()\nwill return 1 when pm runtime state is active, and we don't want to\nget the warning message in this case.\nSo we change the return value < 0 for WARN_ON().",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/2d42a37a4518478f075ccf848242b4a50e313a46"
          },
          {
            "url": "https://git.kernel.org/stable/c/747a69a119c469121385543f21c2d08562968ccc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-39493",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-10T08:15:11.427",
        "lastModified": "2024-07-10T08:15:11.427",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\ncrypto: qat - Fix ADF_DEV_RESET_SYNC memory leak\nUsing completion_done to determine whether the caller has gone\naway only works after a complete call.  Furthermore it's still\npossible that the caller has not yet called wait_for_completion,\nresulting in another potential UAF.\nFix this by making the caller use cancel_work_sync and then freeing\nthe memory safely.",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/0ce5964b82f212f4df6a9813f09a0b5de15bd9c8"
          },
          {
            "url": "https://git.kernel.org/stable/c/3fb4601e0db10d4fe25e46f3fa308d40d37366bd"
          },
          {
            "url": "https://git.kernel.org/stable/c/6396b33e98c096bff9c253ed49c008247963492a"
          },
          {
            "url": "https://git.kernel.org/stable/c/a718b6d2a329e069b27d9049a71be5931e71d960"
          },
          {
            "url": "https://git.kernel.org/stable/c/c2d443aa1ae3175c13a665f3a24b8acd759ce9c3"
          },
          {
            "url": "https://git.kernel.org/stable/c/d0fd124972724cce0d48b9865ce3e273ef69e246"
          },
          {
            "url": "https://git.kernel.org/stable/c/d3b17c6d9dddc2db3670bc9be628b122416a3d26"
          },
          {
            "url": "https://git.kernel.org/stable/c/e7428e7e3fe94a5089dc12ffe5bc31574d2315ad"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-5664",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-07-10T08:15:11.507",
        "lastModified": "2024-07-10T08:15:11.507",
        "baseScore": 6.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.1,
        "impactScore": 2.7,
        "description": "The MP3 Audio Player – Music Player, Podcast Player & Radio by Sonaar plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the 'id' attribute within the plugin's sonaar_audioplayer shortcode in all versions up to, and including, 5.5 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.",
        "cweIds": null,
        "references": [
          {
            "url": "https://plugins.trac.wordpress.org/browser/mp3-music-player-by-sonaar/tags/5.4.0.2/includes/class-sonaar-music-widget.php#L1853"
          },
          {
            "url": "https://plugins.trac.wordpress.org/changeset/3115110/mp3-music-player-by-sonaar/trunk/includes/class-sonaar-music-widget.php"
          },
          {
            "url": "https://wordpress.org/plugins/mp3-music-player-by-sonaar/#developers"
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/c14783d3-68de-49c6-9c54-eb7fc4a7bf94?source=cve"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-6421",
        "sourceIdentifier": "info@cert.vde.com",
        "published": "2024-07-10T08:15:11.720",
        "lastModified": "2024-07-10T08:15:11.720",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "An unauthenticated remote attacker can read out sensitive device information through a incorrectly configured FTP service.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://cert.vde.com/en/advisories/VDE-2024-038"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-6422",
        "sourceIdentifier": "info@cert.vde.com",
        "published": "2024-07-10T08:15:11.970",
        "lastModified": "2024-07-10T08:15:11.970",
        "baseScore": 9.8,
        "baseSeverity": "CRITICAL",
        "exploitabilityScore": 3.9,
        "impactScore": 5.9,
        "description": "An unauthenticated remote attacker can manipulate the device via Telnet, stop processes, read, delete and change data.",
        "cweIds": [
          {
            "id": "CWE-306",
            "description": "Missing Authentication for Critical Function"
          }
        ],
        "references": [
          {
            "url": "https://cert.vde.com/en/advisories/VDE-2024-038"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-6556",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-07-10T09:15:02.747",
        "lastModified": "2024-07-10T09:15:02.747",
        "baseScore": 5.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.9,
        "impactScore": 1.4,
        "description": "The SmartCrawl WordPress SEO checker, SEO analyzer, SEO optimizer plugin for WordPress is vulnerable to Full Path Disclosure in all versions up to, and including, 3.10.8. This is due the plugin utilizing mobiledetect without preventing direct access to the files. This makes it possible for unauthenticated attackers to retrieve the full path of the web application, which can be used to aid other attacks. The information displayed is not useful on its own, and requires another vulnerability to be present for damage to an affected website.",
        "cweIds": null,
        "references": [
          {
            "url": "https://plugins.trac.wordpress.org/changeset?sfp_email=&sfph_mail=&reponame=&old=3115079%40smartcrawl-seo&new=3115079%40smartcrawl-seo&sfp_email=&sfph_mail="
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/4d357096-25da-4cbf-9c6c-261bf1b29a9f?source=cve"
          }
        ]
      }
    }
  ]
}