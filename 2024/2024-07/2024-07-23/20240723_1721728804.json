{
  "totalResults": 2,
  "datePublished": "2024-07-23T19:00:04.108573Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-41012",
        "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
        "published": "2024-07-23T08:15:01.877",
        "lastModified": "2024-07-23T08:15:01.877",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "In the Linux kernel, the following vulnerability has been resolved:\nfilelock: Remove locks reliably when fcntl/close race is detected\nWhen fcntl_setlk() races with close(), it removes the created lock with\ndo_lock_file_wait().\nHowever, LSMs can allow the first do_lock_file_wait() that created the lock\nwhile denying the second do_lock_file_wait() that tries to remove the lock.\nSeparately, posix_lock_file() could also fail to\nremove a lock due to GFP_KERNEL allocation failure (when splitting a range\nin the middle).\nAfter the bug has been triggered, use-after-free reads will occur in\nlock_get_status() when userspace reads /proc/locks. This can likely be used\nto read arbitrary kernel memory, but can't corrupt kernel memory.\nFix it by calling locks_remove_posix() instead, which is designed to\nreliably get rid of POSIX locks associated with the given file and\nfiles_struct and is also used by filp_flush().",
        "cweIds": null,
        "references": [
          {
            "url": "https://git.kernel.org/stable/c/3cad1bc010416c6dd780643476bc59ed742436b9"
          },
          {
            "url": "https://git.kernel.org/stable/c/b6d223942c34057fdfd8f149e763fa823731b224"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29070",
        "sourceIdentifier": "security@apache.org",
        "published": "2024-07-23T09:15:02.503",
        "lastModified": "2024-07-23T09:15:02.503",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "On versions before 2.1.4,Â session is not invalidated after logout. When the user logged in successfully, the Backend service returns \"Authorization\" as the front-end authentication credential. \"Authorization\" can still initiate requests and access data even after logout.\nMitigation:\nall users should upgrade to 2.1.4",
        "cweIds": [
          {
            "id": "CWE-613",
            "description": "Insufficient Session Expiration"
          }
        ],
        "references": [
          {
            "url": "https://lists.apache.org/thread/zslblrz1l0n9t67mqdv42yv75ncfn9zl"
          }
        ]
      }
    }
  ]
}