{
  "totalResults": 9,
  "datePublished": "2024-05-15T07:00:13.988423Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2021-22280",
        "sourceIdentifier": "cybersecurity@ch.abb.com",
        "published": "2024-05-14T20:15:11.263",
        "lastModified": "2024-05-14T20:15:11.263",
        "baseScore": 7.2,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 0.6,
        "impactScore": 6.0,
        "description": "Improper DLL loading algorithms in B&R Automation Studio may allow an authenticated local attacker to\nexecute code with elevated privileges.\nThis issue affects Automation Studio versions before 4.12.",
        "cweIds": null,
        "references": [
          {
            "url": "https://www.br-automation.com/fileadmin/2021-10_DLL_Hijacking_Vulnerability_in_Automation_Studio-7dd34511.pdf"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-32021",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-05-14T20:15:13.630",
        "lastModified": "2024-05-14T20:15:13.630",
        "baseScore": 3.9,
        "baseSeverity": "LOW",
        "exploitabilityScore": 0.8,
        "impactScore": 2.7,
        "description": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, when cloning a local source repository that contains symlinks via the filesystem, Git may create hardlinks to arbitrary user-readable files on the same filesystem as the target repository in the `objects/` directory. Cloning a local repository over the filesystem may creating hardlinks to arbitrary user-owned files on the same filesystem in the target Git repository's `objects/` directory. When cloning a repository over the filesystem (without explicitly specifying the `file://` protocol or `--no-local`), the optimizations for local cloning\nwill be used, which include attempting to hard link the object files instead of copying them. While the code includes checks against symbolic links in the source repository, which were added during the fix for CVE-2022-39253, these checks can still be raced because the hard link operation ultimately follows symlinks. If the object on the filesystem appears as a file during the check, and then a symlink during the operation, this will allow the adversary to bypass the check and create hardlinks in the destination objects directory to arbitrary, user-readable files. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.",
        "cweIds": [
          {
            "id": "CWE-547",
            "description": "Use of Hard-coded, Security-relevant Constants"
          }
        ],
        "references": [
          {
            "url": "https://github.com/git/git/security/advisories/GHSA-mvxm-9j2h-qjx7"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-32465",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-05-14T20:15:14.540",
        "lastModified": "2024-05-14T20:15:14.540",
        "baseScore": 7.3,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 0.7,
        "impactScore": 6.0,
        "description": "Git is a revision control system. The Git project recommends to avoid working in untrusted repositories, and instead to clone it first with `git clone --no-local` to obtain a clean copy. Git has specific protections to make that a safe operation even with an untrusted source repository, but vulnerabilities allow those protections to be bypassed. In the context of cloning local repositories owned by other users, this vulnerability has been covered in CVE-2024-32004. But there are circumstances where the fixes for CVE-2024-32004 are not enough: For example, when obtaining a `.zip` file containing a full copy of a Git repository, it should not be trusted by default to be safe, as e.g. hooks could be configured to run within the context of that repository. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid using Git in repositories that have been obtained via archives from untrusted sources.",
        "cweIds": [
          {
            "id": "CWE-22",
            "description": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          }
        ],
        "references": [
          {
            "url": "https://git-scm.com/docs/git#_security"
          },
          {
            "url": "https://git-scm.com/docs/git-clone"
          },
          {
            "url": "https://github.com/git/git/commit/7b70e9efb18c2cc3f219af399bd384c5801ba1d7"
          },
          {
            "url": "https://github.com/git/git/security/advisories/GHSA-vm9j-46j9-qvq4"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2020-26312",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-05-14T21:15:10.587",
        "lastModified": "2024-05-14T21:15:10.587",
        "baseScore": 8.1,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.8,
        "impactScore": 5.2,
        "description": "Dotmesh is a git-like command-line interface for capturing, organizing and sharing application states. In versions 0.8.1 and prior, the unsafe handling of symbolic links in an unpacking routine may \nenable attackers to read and/or write to arbitrary locations outside the\n designated target folder. The routine `untarFile` attempts to guard against creating symbolic links that point outside the directory a tar archive is extracted to. However, a malicious tarball first linking `subdir/parent` to `..` (allowed, because `subdir/..` falls within the archive root) and then linking `subdir/parent/escapes` to `..` results in a symbolic link pointing to the tarball’s parent directory, contrary to the routine’s goals. This issue may lead to arbitrary file write (with same permissions as the program running the unpack operation) if the attacker can control the archive file. Additionally, if the attacker has read access to the unpacked files, they may be able to read arbitrary system files the parent process has permissions to read. As of time of publication, no patch for this issue is available.",
        "cweIds": [
          {
            "id": "CWE-125",
            "description": "Out-of-bounds Read"
          },
          {
            "id": "CWE-787",
            "description": "Out-of-bounds Write"
          }
        ],
        "references": [
          {
            "url": "https://github.com/dotmesh-io/dotmesh/blob/master/pkg/archiver/tar.go#L255"
          },
          {
            "url": "https://securitylab.github.com/advisories/GHSL-2020-254-zipslip-dotmesh/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2022-28132",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-05-14T21:15:11.760",
        "lastModified": "2024-05-14T21:15:11.760",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The T-Soft E-Commerce 4 web application is susceptible to SQL injection (SQLi) attacks when authenticated as an admin or privileged user. This vulnerability allows attackers to access and manipulate the database through crafted requests. By exploiting this flaw, attackers can bypass authentication mechanisms, view sensitive information stored in the database, and potentially exfiltrate data.",
        "cweIds": null,
        "references": [
          {
            "url": "https://www.exploit-db.com/exploits/50939"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31556",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-05-14T21:15:12.060",
        "lastModified": "2024-05-14T21:15:12.060",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "An issue in Reportico Web before v.8.1.0 allows a local attacker to execute arbitrary code and obtain sensitive information via the sessionid function.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/reportico-web/reportico/issues/53"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3044",
        "sourceIdentifier": "security@documentfoundation.org",
        "published": "2024-05-14T21:15:12.627",
        "lastModified": "2024-05-14T21:15:12.627",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "Unchecked script execution in Graphic on-click binding in affected LibreOffice versions allows an attacker to create a document which without prompt will execute scripts built-into LibreOffice on clicking a graphic. Such scripts were previously deemed trusted but are now deemed untrusted.",
        "cweIds": [
          {
            "id": "CWE-20",
            "description": "Improper Input Validation"
          }
        ],
        "references": [
          {
            "url": "https://www.libreoffice.org/about-us/security/advisories/CVE-2024-3044"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-4561",
        "sourceIdentifier": "security@progress.com",
        "published": "2024-05-14T21:15:13.010",
        "lastModified": "2024-05-14T21:15:13.010",
        "baseScore": 4.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 2.5,
        "description": "In WhatsUp Gold versions released before 2023.1.2 , \na blind SSRF vulnerability exists in Whatsup Gold's FaviconController that allows an attacker to send arbitrary HTTP requests on behalf of the vulnerable server.",
        "cweIds": [
          {
            "id": "CWE-918",
            "description": "Server-Side Request Forgery (SSRF)"
          }
        ],
        "references": [
          {
            "url": "https://community.progress.com/s/article/Announcing-WhatsUp-Gold-v2023-1-2"
          },
          {
            "url": "https://www.progress.com/network-monitoring"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-4562",
        "sourceIdentifier": "security@progress.com",
        "published": "2024-05-14T21:15:13.767",
        "lastModified": "2024-05-14T21:15:13.767",
        "baseScore": 5.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 2.5,
        "description": "In WhatsUp Gold versions released before 2023.1.2 , \nan SSRF vulnerability exists in Whatsup Gold's \nIssue exists in the HTTP Monitoring functionality.  \nDue to the lack of proper authorization, any authenticated user can access the HTTP monitoring functionality, what leads to the Server Side Request Forgery.",
        "cweIds": [
          {
            "id": "CWE-918",
            "description": "Server-Side Request Forgery (SSRF)"
          }
        ],
        "references": [
          {
            "url": "https://community.progress.com/s/article/Announcing-WhatsUp-Gold-v2023-1-2"
          },
          {
            "url": "https://www.progress.com/network-monitoring"
          }
        ]
      }
    }
  ]
}