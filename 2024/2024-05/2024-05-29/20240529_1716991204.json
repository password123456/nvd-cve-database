{
  "totalResults": 5,
  "datePublished": "2024-05-29T23:00:04.609681Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2023-42005",
        "sourceIdentifier": "psirt@us.ibm.com",
        "published": "2024-05-29T13:15:48.710",
        "lastModified": "2024-05-29T15:18:26.427",
        "baseScore": 7.4,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.4,
        "impactScore": 5.9,
        "description": "IBM Db2 on Cloud Pak for Data and Db2 Warehouse on Cloud Pak for Data 3.5, 4.0, 4.5, 4.6, 4.7, and 4.8 could allow a user with access to the Kubernetes pod, to make system calls compromising the security of containers. IBM X-Force ID: 265264.",
        "cweIds": null,
        "references": [
          {
            "url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/265264"
          },
          {
            "url": "https://www.ibm.com/support/pages/node/7155078"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-25976",
        "sourceIdentifier": "551230f0-3615-47bd-b7cc-93e92e730bbf",
        "published": "2024-05-29T13:15:49.563",
        "lastModified": "2024-05-29T15:18:26.427",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "When LDAP authentication is activated in the configuration it is possible to obtain reflected XSS execution by creating a custom URL that the victim only needs to open in order to execute arbitrary JavaScript code in the victim's browser. This is due to a fault in the file login.php where the content of \"$_SERVER['PHP_SELF']\" is reflected into the HTML of the website. Hence the attacker does not need a valid account in order to exploit this issue.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/HAWK-Digital-Environments/HAWKI/commit/146967f3148e92d1640ffebc21d8914e2d7fb3f1"
          },
          {
            "url": "https://r.sec-consult.com/hawki"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-25977",
        "sourceIdentifier": "551230f0-3615-47bd-b7cc-93e92e730bbf",
        "published": "2024-05-29T13:15:49.683",
        "lastModified": "2024-05-29T15:18:26.427",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The application does not change the session token when using the login or logout functionality. An attacker can set a session token in the victim's browser (e.g. via XSS) and prompt the victim to log in (e.g. via a redirect to the login page). This results in the victim's account being taken over.",
        "cweIds": [
          {
            "id": "CWE-384",
            "description": "Session Fixation"
          }
        ],
        "references": [
          {
            "url": "https://github.com/HAWK-Digital-Environments/HAWKI/commit/146967f3148e92d1640ffebc21d8914e2d7fb3f1"
          },
          {
            "url": "https://r.sec-consult.com/hawki"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-5039",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-05-29T13:15:49.790",
        "lastModified": "2024-05-29T15:18:26.427",
        "baseScore": 6.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.1,
        "impactScore": 2.7,
        "description": "The HUSKY – Products Filter Professional for WooCommerce plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the plugin's shortcode(s) in all versions up to, and including, 1.3.5.3 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.",
        "cweIds": null,
        "references": [
          {
            "url": "https://plugins.trac.wordpress.org/browser/woocommerce-products-filter/trunk/views/woof.php#L525"
          },
          {
            "url": "https://plugins.trac.wordpress.org/changeset/3093324/"
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/0f6e7fcd-f5f5-47a0-9d8a-74e2f67d10b5?source=cve"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-5185",
        "sourceIdentifier": "disclosure@synopsys.com",
        "published": "2024-05-29T13:15:50.003",
        "lastModified": "2024-05-29T15:18:26.427",
        "baseScore": 7.3,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.1,
        "impactScore": 5.2,
        "description": "The EmbedAI application is susceptible to security issues that enable Data Poisoning attacks. This weakness could result in the application becoming compromised, leading to unauthorized entries or data poisoning attacks, which are delivered by a CSRF vulnerability due to the absence of a secure session management implementation and weak CORS policies weakness. An attacker can direct a user to a malicious webpage that exploits a CSRF vulnerability within the EmbedAI application. By leveraging this CSRF vulnerability, the attacker can deceive the user into inadvertently uploading and integrating incorrect data into the application’s language model.",
        "cweIds": [
          {
            "id": "CWE-349",
            "description": "Acceptance of Extraneous Untrusted Data With Trusted Data"
          }
        ],
        "references": [
          {
            "url": "https://www.synopsys.com/blogs/software-security/cyrc-advisory-data-poisoning-embedai.html"
          }
        ]
      }
    }
  ]
}