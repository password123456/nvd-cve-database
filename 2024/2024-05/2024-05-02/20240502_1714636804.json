{
  "totalResults": 13,
  "datePublished": "2024-05-02T17:00:04.100234Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-2405",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:49.947",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Float menu  WordPress plugin before 6.0.1 does not have CSRF check in its bulk actions, which could allow attackers to make logged in admin delete arbitrary menu via a CSRF attack.",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/c42ffa15-6ebe-4c70-9e51-b95bd05ea04d/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3471",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:50.350",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Button Generator  WordPress plugin before 3.0 does not have CSRF check in place when bulk deleting, which could allow attackers to make a logged in admin delete buttons via a CSRF attack",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/a3c282fb-81b8-48bf-8c18-8366ea8ad9af/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3472",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:50.453",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Modal Window  WordPress plugin before 5.3.10 does not have CSRF check in place when bulk deleting modals, which could allow attackers to make a logged in admin delete them via a CSRF attack",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/d42f74dd-520f-40aa-9cf0-3544db9562c7/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3474",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:50.527",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Wow Skype Buttons WordPress plugin before 4.0.4 does not have CSRF checks in some bulk actions, which could allow attackers to make logged in admins perform unwanted actions, such as deleting buttons via CSRF attacks",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/e5c3e145-6738-4d85-8507-43ca1b1d5877/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3475",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:50.660",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Sticky Buttons  WordPress plugin before 3.2.4 does not have CSRF checks in some bulk actions, which could allow attackers to make logged in admins perform unwanted actions, such as deleting buttons via CSRF attacks",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/bf540242-5306-4c94-ad50-782d0d5b127f/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3476",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:50.887",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Side Menu Lite  WordPress plugin before 4.2.1 does not have CSRF checks in some bulk actions, which could allow attackers to make logged in admins perform unwanted actions, such as deleting buttons via CSRF attacks",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/46f74493-9082-48b2-90bc-2c1d1db64ccd/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3477",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:50.950",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Popup Box  WordPress plugin before 2.2.7 does not have CSRF checks in some bulk actions, which could allow attackers to make logged in admins perform unwanted actions, such as deleting popups via CSRF attacks",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/ca5e59e6-c500-4129-997b-391cdf9aa9c7/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3478",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:51.033",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Herd Effects  WordPress plugin before 5.2.7 does not have CSRF checks in some bulk actions, which could allow attackers to make logged in admins perform unwanted actions, such as deleting effects via CSRF attacks",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/09f1a696-86ee-47cc-99de-57cfd2a3219d/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3481",
        "sourceIdentifier": "contact@wpscan.com",
        "published": "2024-05-02T06:15:51.130",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "The Counter Box  WordPress plugin before 1.2.4 does not have CSRF checks in some bulk actions, which could allow attackers to make logged in admins perform unwanted actions, such deleting counters via CSRF attacks",
        "cweIds": null,
        "references": [
          {
            "url": "https://wpscan.com/vulnerability/0c441293-e7f9-4634-8f3a-09925cd2b696/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-32882",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-05-02T07:15:20.967",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": 2.7,
        "baseSeverity": "LOW",
        "exploitabilityScore": 1.2,
        "impactScore": 1.4,
        "description": "Wagtail is an open source content management system built on Django. In affected versions if a model has been made available for editing through the `wagtail.contrib.settings` module or `ModelViewSet`, and the `permission` argument on `FieldPanel` has been used to further restrict access to one or more fields of the model, a user with edit permission over the model but not the specific field can craft an HTTP POST request that bypasses the permission check on the individual field, allowing them to update its value. This vulnerability is not exploitable by an ordinary site visitor without access to the Wagtail admin, or by a user who has not been granted edit access to the model in question. The editing interfaces for pages and snippets are also unaffected. Patched versions have been released as Wagtail 6.0.3 and 6.1. Wagtail releases prior to 6.0 are unaffected. Users are advised to upgrade. Site owners who are unable to upgrade to a patched version can avoid the vulnerability as follows: 1.For models registered through `ModelViewSet`, register the model as a snippet instead; 2. For settings models, place the restricted fields in a separate settings model, and configure permission at the model level.",
        "cweIds": [
          {
            "id": "CWE-280",
            "description": "Improper Handling of Insufficient Permissions or Privileges"
          },
          {
            "id": "CWE-281",
            "description": "Improper Preservation of Permissions"
          }
        ],
        "references": [
          {
            "url": "https://docs.wagtail.org/en/stable/extending/generic_views.html#modelviewset"
          },
          {
            "url": "https://docs.wagtail.org/en/stable/reference/contrib/settings.html"
          },
          {
            "url": "https://docs.wagtail.org/en/stable/reference/pages/panels.html#wagtail.admin.panels.FieldPanel.permission"
          },
          {
            "url": "https://github.com/wagtail/wagtail/commit/ab2a5d82b4ee3c909d2456704388ccf90e367c9b"
          },
          {
            "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-w2v8-php4-p8hc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-32962",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-05-02T07:15:21.420",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": 10.0,
        "baseSeverity": "CRITICAL",
        "exploitabilityScore": 3.9,
        "impactScore": 5.8,
        "description": "xml-crypto is an xml digital signature and encryption library for Node.js. In affected versions the default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of the w3 xmldsig-core-20080610 spec. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a `<KeyInfo />` element, and pass `xml-crypto` default validation checks. As a result `xml-crypto` trusts by default any certificate provided via digitally signed XML document's `<KeyInfo />`. `xml-crypto` prefers to use any certificate provided via digitally signed XML document's `<KeyInfo />` even if library was configured to use specific certificate (`publicCert`) for signature verification purposes.  An attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to `<KeyInfo />` element. This vulnerability is combination of changes introduced to `4.0.0` on pull request 301 / commit `c2b83f98` and has been addressed in version 6.0.0 with pull request 445 / commit `21201723d`. Users are advised to upgrade. Users unable to upgrade may either check the certificate extracted via `getCertFromKeyInfo` against trusted certificates before accepting the results of the validation or set `xml-crypto's getCertFromKeyInfo` to `() => undefined` forcing `xml-crypto` to use an explicitly configured `publicCert` or `privateKey` for signature verification.",
        "cweIds": [
          {
            "id": "CWE-347",
            "description": "Improper Verification of Cryptographic Signature"
          }
        ],
        "references": [
          {
            "url": "https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000"
          },
          {
            "url": "https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca"
          },
          {
            "url": "https://github.com/node-saml/xml-crypto/pull/301"
          },
          {
            "url": "https://github.com/node-saml/xml-crypto/pull/445"
          },
          {
            "url": "https://github.com/node-saml/xml-crypto/security/advisories/GHSA-2xp3-57p7-qf4v"
          },
          {
            "url": "https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-32971",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-05-02T07:15:21.733",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": 9.0,
        "baseSeverity": "CRITICAL",
        "exploitabilityScore": 2.2,
        "impactScore": 6.0,
        "description": "Apollo Router is a configurable, graph router written in Rust to run a federated supergraph that uses Apollo Federation 2. The affected versions of Apollo Router contain a bug that in limited circumstances, could lead to unexpected operations being executed which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors. The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary. For a query, results may be fetched that don’t match what was requested (e.g., rather than running `fetchUsers(type: ENTERPRISE)` the Router may run `fetchUsers(type: TRIAL)`. For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending `deleteUser(id: 10)` to a subgraph, the Router may run `deleteUser(id: 12)`. Users who are using distributed query plan caching, are advised to either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. Apollo Router versions 1.44.0 or 1.45.0 are not recommended for use and have been withdrawn. Users unable to upgrade can disable distributed query plan caching to mitigate this issue.",
        "cweIds": [
          {
            "id": "CWE-440",
            "description": "Expected Behavior Violation"
          },
          {
            "id": "CWE-670",
            "description": "Always-Incorrect Control Flow Implementation"
          }
        ],
        "references": [
          {
            "url": "https://github.com/apollographql/router/commit/ff9f666598cd17661880fe7fc6e9c9611316e529"
          },
          {
            "url": "https://github.com/apollographql/router/releases/tag/v1.45.1"
          },
          {
            "url": "https://github.com/apollographql/router/security/advisories/GHSA-q9p4-hw9m-fj2v"
          },
          {
            "url": "https://www.apollographql.com/docs/router/configuration/distributed-caching/#distributed-query-plan-caching"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3490",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-05-02T07:15:22.040",
        "lastModified": "2024-05-02T13:27:25.103",
        "baseScore": 6.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.1,
        "impactScore": 2.7,
        "description": "The WP Recipe Maker plugin for WordPress is vulnerable to Stored Cross-Site Scripting via the plugin's wprm-recipe-roundup-item shortcode in all versions up to, and including, 9.3.1 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers, with contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.",
        "cweIds": null,
        "references": [
          {
            "url": "https://plugins.trac.wordpress.org/changeset/3078644/wp-recipe-maker"
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/69cc7b6c-b6c2-4bba-afb4-86ba1b36b295?source=cve"
          }
        ]
      }
    }
  ]
}