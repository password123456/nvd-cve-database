{
  "totalResults": 18,
  "datePublished": "2024-04-05T01:00:04.495134Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-2700",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2024-04-04T14:15:09.950",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.0,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.0,
        "impactScore": 5.9,
        "description": "A vulnerability was found in the quarkus-core component. Quarkus captures the local environment variables from the Quarkus namespace during the application's build. Thus, running the resulting application inherits the values captured at build time. \nHowever, some local environment variables may have been set by the developer / CI environment for testing purposes, such as dropping the database during the application startup or trusting all TLS certificates to accept self-signed certificates. If these properties are configured using environment variables or the .env facility, they are captured into the built application. It leads to dangerous behavior if the application does not override these values.\nThis behavior only happens for configuration properties from the `quarkus.*` namespace. So, application-specific properties are not captured.",
        "cweIds": [
          {
            "id": "CWE-526",
            "description": "Cleartext Storage of Sensitive Information in an Environment Variable"
          }
        ],
        "references": [
          {
            "url": "https://access.redhat.com/security/cve/CVE-2024-2700"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2273281"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-2759",
        "sourceIdentifier": "cvd@cert.pl",
        "published": "2024-04-04T14:15:10.220",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "Improper access control vulnerability in Apaczka plugin for PrestaShop allows information gathering from saved templates without authentication.This issue affects Apaczka plugin for PrestaShop from v1 through v4.",
        "cweIds": [
          {
            "id": "CWE-284",
            "description": "Improper Access Control"
          }
        ],
        "references": [
          {
            "url": "https://cert.pl/en/posts/2024/04/CVE-2024-2759/"
          },
          {
            "url": "https://cert.pl/posts/2024/04/CVE-2024-2759/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31080",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2024-04-04T14:15:10.330",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.3,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.8,
        "impactScore": 5.5,
        "description": "A heap-based buffer over-read vulnerability was found in the X.org server's ProcXIGetSelectedEvents() function. This issue occurs when byte-swapped length values are used in replies, potentially leading to memory leakage and segmentation faults, particularly when triggered by a client with a different endianness. This vulnerability could be exploited by an attacker to cause the X server to read heap memory values and then transmit them back to the client until encountering an unmapped page, resulting in a crash. Despite the attacker's inability to control the specific memory copied into the replies, the small length values typically stored in a 32-bit integer can result in significant attempted out-of-bounds reads.",
        "cweIds": [
          {
            "id": "CWE-126",
            "description": "Buffer Over-read"
          }
        ],
        "references": [
          {
            "url": "https://access.redhat.com/security/cve/CVE-2024-31080"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2271997"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31081",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2024-04-04T14:15:10.593",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.3,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.8,
        "impactScore": 5.5,
        "description": "A heap-based buffer over-read vulnerability was found in the X.org server's ProcXIPassiveGrabDevice() function. This issue occurs when byte-swapped length values are used in replies, potentially leading to memory leakage and segmentation faults, particularly when triggered by a client with a different endianness. This vulnerability could be exploited by an attacker to cause the X server to read heap memory values and then transmit them back to the client until encountering an unmapped page, resulting in a crash. Despite the attacker's inability to control the specific memory copied into the replies, the small length values typically stored in a 32-bit integer can result in significant attempted out-of-bounds reads.",
        "cweIds": [
          {
            "id": "CWE-126",
            "description": "Buffer Over-read"
          }
        ],
        "references": [
          {
            "url": "https://access.redhat.com/security/cve/CVE-2024-31081"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2271998"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31082",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2024-04-04T14:15:10.833",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.3,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.8,
        "impactScore": 5.5,
        "description": "A heap-based buffer over-read vulnerability was found in the X.org server's ProcAppleDRICreatePixmap() function. This issue occurs when byte-swapped length values are used in replies, potentially leading to memory leakage and segmentation faults, particularly when triggered by a client with a different endianness. This vulnerability could be exploited by an attacker to cause the X server to read heap memory values and then transmit them back to the client until encountering an unmapped page, resulting in a crash. Despite the attacker's inability to control the specific memory copied into the replies, the small length values typically stored in a 32-bit integer can result in significant attempted out-of-bounds reads.",
        "cweIds": [
          {
            "id": "CWE-126",
            "description": "Buffer Over-read"
          }
        ],
        "references": [
          {
            "url": "https://access.redhat.com/security/cve/CVE-2024-31082"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2271999"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3296",
        "sourceIdentifier": "secalert@redhat.com",
        "published": "2024-04-04T14:15:11.080",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 5.9,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.2,
        "impactScore": 3.6,
        "description": "A timing-based side-channel exists in the rust-openssl package, which could be sufficient to recover a plaintext across a network in a Bleichenbacher-style attack. To achieve successful decryption, an attacker would have to be able to send a large number of trial messages for decryption. The vulnerability affects the legacy PKCS#1v1.5 RSA encryption padding mode.",
        "cweIds": [
          {
            "id": "CWE-203",
            "description": "Observable Discrepancy"
          }
        ],
        "references": [
          {
            "url": "https://access.redhat.com/security/cve/CVE-2024-3296"
          },
          {
            "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2269723"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-22189",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:37.990",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "quic-go is an implementation of the QUIC protocol in Go. Prior to version 0.42.0, an attacker can cause its peer to run out of memory sending a large number of `NEW_CONNECTION_ID` frames that retire old connection IDs. The receiver is supposed to respond to each retirement frame with a `RETIRE_CONNECTION_ID` frame. The attacker can prevent the receiver from sending out (the vast majority of) these `RETIRE_CONNECTION_ID` frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate. Version 0.42.0 contains a patch for the issue. No known workarounds are available.",
        "cweIds": [
          {
            "id": "CWE-770",
            "description": "Allocation of Resources Without Limits or Throttling"
          }
        ],
        "references": [
          {
            "url": "https://github.com/quic-go/quic-go/commit/4a99b816ae3ab03ae5449d15aac45147c85ed47a"
          },
          {
            "url": "https://github.com/quic-go/quic-go/security/advisories/GHSA-c33x-xqrf-c478"
          },
          {
            "url": "https://seemann.io/posts/2024-03-19-exploiting-quics-connection-id-management"
          },
          {
            "url": "https://www.youtube.com/watch?v=JqXtYcZAtIA&t=3683s"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-27919",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:38.207",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "Envoy is a cloud-native, open-source edge and service proxy. In versions 1.29.0 and 1.29.1, theEnvoy HTTP/2 protocol stack is vulnerable to the flood of CONTINUATION frames. Envoy's HTTP/2 codec does not reset a request when header map limits have been exceeded. This allows an attacker to send an sequence of CONTINUATION frames without the END_HEADERS bit set causing unlimited memory consumption. This can lead to denial of service through memory exhaustion. Users should upgrade to versions 1.29.2 to mitigate the effects of the CONTINUATION flood. Note that this vulnerability is a regression in Envoy version 1.29.0 and 1.29.1 only. As a workaround, downgrade to version 1.28.1 or earlier or disable HTTP/2 protocol for downstream connections.",
        "cweIds": [
          {
            "id": "CWE-390",
            "description": "Detection of Error Condition Without Action"
          }
        ],
        "references": [
          {
            "url": "https://github.com/envoyproxy/envoy/commit/57a02565532c18eb9df972a3e8974be3ae59f2d5"
          },
          {
            "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-gghf-vfxp-799r"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28182",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:38.427",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 5.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.9,
        "impactScore": 1.4,
        "description": "nghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-770",
            "description": "Allocation of Resources Without Limits or Throttling"
          }
        ],
        "references": [
          {
            "url": "https://github.com/nghttp2/nghttp2/commit/00201ecd8f982da3b67d4f6868af72a1b03b14e0"
          },
          {
            "url": "https://github.com/nghttp2/nghttp2/commit/d71a4668c6bead55805d18810d633fbb98315af9"
          },
          {
            "url": "https://github.com/nghttp2/nghttp2/security/advisories/GHSA-x6x3-gv8h-m57q"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-28871",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:38.647",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "LibHTP is a security-aware parser for the HTTP protocol and the related bits and pieces. Version 0.5.46 may parse malformed request traffic, leading to excessive CPU usage. Version 0.5.47 contains a patch for the issue. No known workarounds are available.",
        "cweIds": [
          {
            "id": "CWE-770",
            "description": "Allocation of Resources Without Limits or Throttling"
          }
        ],
        "references": [
          {
            "url": "https://github.com/OISF/libhtp/commit/79e713f3e527593a45f545e854cd9e6fbb3cd3ed"
          },
          {
            "url": "https://github.com/OISF/libhtp/commit/bf618ec7f243cebfb0f7e84c3cb158955cb32b4d"
          },
          {
            "url": "https://github.com/OISF/libhtp/security/advisories/GHSA-ffr2-45w9-7wmg"
          },
          {
            "url": "https://redmine.openinfosecfoundation.org/issues/6757"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29182",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:38.847",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 6.1,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 2.7,
        "description": "Collabora Online is a collaborative online office suite based on LibreOffice. A stored cross-site scripting vulnerability was found in Collabora Online. An attacker could create a document with an XSS payload in document text referenced by field which, if hovered over to produce a tooltip, could be executed by the user's browser. Users should upgrade to Collabora Online 23.05.10.1 or higher. Earlier series of Collabora Online, 22.04, 21.11, etc. are unaffected.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/CollaboraOnline/online/security/advisories/GHSA-9gmw-5q2c-4398"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29191",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:39.043",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 6.1,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 2.7,
        "description": "gotortc is a camera streaming application. Versions 1.8.5 and prior are vulnerable to DOM-based cross-site scripting. The links page (`links.html`) appends the `src` GET parameter (`[0]`) in all of its links for 1-click previews. The context in which `src` is being appended is `innerHTML` (`[1]`), which will insert the text as HTML. Commit 3b3d5b033aac3a019af64f83dec84f70ed2c8aba contains a patch for the issue.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/AlexxIT/go2rtc/commit/3b3d5b033aac3a019af64f83dec84f70ed2c8aba"
          },
          {
            "url": "https://securitylab.github.com/advisories/GHSL-2023-205_GHSL-2023-207_go2rtc/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-30250",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:39.240",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "Astro-Shield is an integration to enhance website security with SubResource Integrity hashes, Content-Security-Policy headers, and other techniques. Versions from 1.2.0 to 1.3.1 of Astro-Shield allow bypass to the allow-lists for cross-origin resources by introducing valid `integrity` attributes to the injected code. This implies that the injected SRI hash would be added to the generated CSP header, which would lead the browser to believe that the injected resource is legit. This vulnerability is patched in version 1.3.2.",
        "cweIds": [
          {
            "id": "CWE-345",
            "description": "Insufficient Verification of Data Authenticity"
          }
        ],
        "references": [
          {
            "url": "https://github.com/kindspells/astro-shield/commit/1221019306f501bf5fa9bcfb5a23a2321d34ba0a"
          },
          {
            "url": "https://github.com/kindspells/astro-shield/commit/5ae8b8ef4f681d3a81431ee7e79d5dec545c6e1f"
          },
          {
            "url": "https://github.com/kindspells/astro-shield/releases/tag/1.3.2"
          },
          {
            "url": "https://github.com/kindspells/astro-shield/security/advisories/GHSA-c4gr-q97g-ppwc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-30261",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-04T15:15:39.460",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 2.6,
        "baseSeverity": "LOW",
        "exploitabilityScore": 1.2,
        "impactScore": 1.4,
        "description": "Undici is an HTTP/1.1 client, written from scratch for Node.js. An attacker can alter the `integrity` option passed to `fetch()`, allowing `fetch()` to accept requests as valid even if they have been tampered. This vulnerability was patched in version(s) 5.28.4 and 6.11.1.",
        "cweIds": [
          {
            "id": "CWE-284",
            "description": "Improper Access Control"
          }
        ],
        "references": [
          {
            "url": "https://github.com/nodejs/undici/commit/2b39440bd9ded841c93dd72138f3b1763ae26055"
          },
          {
            "url": "https://github.com/nodejs/undici/commit/d542b8cd39ec1ba303f038ea26098c3f355974f3"
          },
          {
            "url": "https://github.com/nodejs/undici/security/advisories/GHSA-9qxr-qj54-h672"
          },
          {
            "url": "https://hackerone.com/reports/2377760"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3116",
        "sourceIdentifier": "f86ef6dc-4d3a-42ad-8f28-e6d5547a5007",
        "published": "2024-04-04T15:15:39.667",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.4,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.1,
        "impactScore": 3.7,
        "description": "pgAdmin <= 8.4 is affected by a  Remote Code Execution (RCE) vulnerability through the validate binary path API. This vulnerability allows attackers to execute arbitrary code on the server hosting PGAdmin, posing a severe risk to the database management system's integrity and the security of the underlying data.",
        "cweIds": null,
        "references": [
          {
            "url": "https://gist.github.com/aelmokhtar/689a8be7e3bd535ec01992d8ec7b2b98"
          },
          {
            "url": "https://github.com/pgadmin-org/pgadmin4/issues/7326"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3250",
        "sourceIdentifier": "security@ubuntu.com",
        "published": "2024-04-04T15:15:39.837",
        "lastModified": "2024-04-04T22:15:09.350",
        "baseScore": 6.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.0,
        "impactScore": 4.0,
        "description": "It was discovered that Canonical's Pebble service manager read-file API and the associated pebble pull command, before v1.10.2, allowed unprivileged local users to read files with root-equivalent permissions when Pebble was running as root. Fixes are also available as backports to v1.1.1, v1.4.2, and v1.7.4.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/canonical/pebble/security/advisories/GHSA-4685-2x5r-65pj"
          },
          {
            "url": "https://www.cve.org/CVERecord?id=CVE-2024-3250"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3298",
        "sourceIdentifier": "3DS.Information-Security@3ds.com",
        "published": "2024-04-04T15:15:40.017",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.8,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.8,
        "impactScore": 5.9,
        "description": "Out-Of-Bounds Write and Type Confusion vulnerabilities exist in the file reading procedure in eDrawings from Release SOLIDWORKS 2023 through Release SOLIDWORKS 2024. These vulnerabilities could allow an attacker to execute arbitrary code while opening a specially crafted DWG or DXF. NOTE: this vulnerability was SPLIT from CVE-2024-1847.",
        "cweIds": [
          {
            "id": "CWE-787",
            "description": "Out-of-bounds Write"
          },
          {
            "id": "CWE-843",
            "description": "Access of Resource Using Incompatible Type ('Type Confusion')"
          }
        ],
        "references": [
          {
            "url": "https://www.3ds.com/vulnerability/advisories"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-3299",
        "sourceIdentifier": "3DS.Information-Security@3ds.com",
        "published": "2024-04-04T15:15:40.197",
        "lastModified": "2024-04-04T16:33:06.610",
        "baseScore": 7.8,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.8,
        "impactScore": 5.9,
        "description": "Out-Of-Bounds Write, Use of Uninitialized Resource and Use-After-Free vulnerabilities exist in the file reading procedure in eDrawings from Release SOLIDWORKS 2023 through Release SOLIDWORKS 2024. These vulnerabilities could allow an attacker to execute arbitrary code while opening a specially crafted SLDDRW or SLDPRT file. NOTE: this vulnerability was SPLIT from CVE-2024-1847.",
        "cweIds": [
          {
            "id": "CWE-416",
            "description": "Use After Free"
          },
          {
            "id": "CWE-787",
            "description": "Out-of-bounds Write"
          },
          {
            "id": "CWE-908",
            "description": "Use of Uninitialized Resource"
          }
        ],
        "references": [
          {
            "url": "https://www.3ds.com/vulnerability/advisories"
          }
        ]
      }
    }
  ]
}