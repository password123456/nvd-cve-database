{
  "totalResults": 11,
  "datePublished": "2024-04-11T09:00:07.923869Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-29504",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-10T22:15:07.287",
        "lastModified": "2024-04-10T22:15:07.287",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "Cross Site Scripting vulnerability in Summernote v.0.8.18 and before allows a remote attacker to execute arbtirary code via a crafted payload to the codeview parameter.",
        "cweIds": null,
        "references": [
          {
            "url": "https://gist.github.com/phoenix118go/a9192281efcfa518daa709ab7638712b"
          },
          {
            "url": "https://github.com/summernote/summernote/pull/3782"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31995",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-10T22:15:07.340",
        "lastModified": "2024-04-10T22:15:07.340",
        "baseScore": 4.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 1.4,
        "description": "`@digitalbazaar/zcap` provides JavaScript reference implementation for Authorization Capabilities. Prior to version 9.0.1, when invoking a capability with a chain depth of 2, i.e., it is delegated directly from the root capability, the `expires` property is not properly checked against the current date or other `date` param.  This can allow invocations outside of the original intended time period.  A zcap still cannot be invoked without being able to use the associated private key material. `@digitalbazaar/zcap` v9.0.1 fixes expiration checking. As a workaround, one may revoke a zcap at any time.",
        "cweIds": [
          {
            "id": "CWE-613",
            "description": "Insufficient Session Expiration"
          }
        ],
        "references": [
          {
            "url": "https://github.com/digitalbazaar/zcap/commit/261eea040109b6e25159c88d8ed49d3c37f8fcfe"
          },
          {
            "url": "https://github.com/digitalbazaar/zcap/commit/55f8549c80124b85dfb0f3dcf83f2c63f42532e5"
          },
          {
            "url": "https://github.com/digitalbazaar/zcap/pull/82"
          },
          {
            "url": "https://github.com/digitalbazaar/zcap/security/advisories/GHSA-hp8h-7x69-4wmv"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31997",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-10T22:15:07.527",
        "lastModified": "2024-04-10T22:15:07.527",
        "baseScore": 9.9,
        "baseSeverity": "CRITICAL",
        "exploitabilityScore": 3.1,
        "impactScore": 6.0,
        "description": "XWiki Platform is a generic wiki platform. Prior to versions 4.10.19, 15.5.4, and 15.10-rc-1, parameters of UI extensions are always interpreted as Velocity code and executed with programming rights. Any user with edit right on any document like the user's own profile can create UI extensions. This allows remote code execution and thereby impacts the confidentiality, integrity and availability of the whole XWiki installation. This vulnerability has been patched in XWiki 14.10.19, 15.5.4 and 15.9-RC1. No known workarounds are available.",
        "cweIds": [
          {
            "id": "CWE-862",
            "description": "Missing Authorization"
          }
        ],
        "references": [
          {
            "url": "https://github.com/xwiki/xwiki-platform/commit/171e7c7d0e56deaa7b3678657ae26ef95379b1ea"
          },
          {
            "url": "https://github.com/xwiki/xwiki-platform/commit/1b2574eb966457ca4ef34e557376b8751d1be90d"
          },
          {
            "url": "https://github.com/xwiki/xwiki-platform/commit/56748e154a9011f0d6239bec0823eaaeab6ec3f7"
          },
          {
            "url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-c2gg-4gq4-jv5j"
          },
          {
            "url": "https://jira.xwiki.org/browse/XWIKI-21335"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31999",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-10T22:15:07.710",
        "lastModified": "2024-04-10T22:15:07.710",
        "baseScore": 7.4,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.8,
        "impactScore": 4.0,
        "description": "@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a \"last update\" field in the session, and treat \"old sessions\" as expired.",
        "cweIds": [
          {
            "id": "CWE-613",
            "description": "Insufficient Session Expiration"
          }
        ],
        "references": [
          {
            "url": "https://github.com/fastify/fastify-secure-session/commit/56d66642ecc633cff0606927601e81cdac361370"
          },
          {
            "url": "https://github.com/fastify/fastify-secure-session/security/advisories/GHSA-9wwp-q7wq-jx35"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29439",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-10T23:15:06.753",
        "lastModified": "2024-04-10T23:15:06.753",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "An unauthorized node injection vulnerability has been identified in ROS2 Humble Hawksbill in ROS_VERSION 2 and ROS_PYTHON_VERSION 3, allows remote attackers to escalate privileges and inject malicious ROS2 nodes into the system.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/yashpatelphd/CVE-2024-29439"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29443",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-10T23:15:06.810",
        "lastModified": "2024-04-10T23:15:06.810",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "A shell injection vulnerability was discovered in ROS2 (Robot Operating System 2) Humble Hawksbill in ROS_VERSION 2 and ROS_PYTHON_VERSION 3, allows remote attackers to execute arbitrary code, escalate privileges, and obtain sensitive information due to the way ROS2 handles shell command execution in components like command interpreters or interfaces that process external inputs.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/yashpatelphd/CVE-2024-29443"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29445",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-10T23:15:06.857",
        "lastModified": "2024-04-10T23:15:06.857",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "An issue was discovered in ROS2 (Robot Operating System 2) Humble Hawksbill in ROS_VERSION 2 and ROS_PYTHON_VERSION 3 where the system transmits messages in plaintext, allowing attackers to access sensitive information via a man-in-the-middle attack.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/yashpatelphd/CVE-2024-29445"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29902",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-10T23:15:06.920",
        "lastModified": "2024-04-10T23:15:06.920",
        "baseScore": 4.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 0.5,
        "impactScore": 3.6,
        "description": "Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, a remote image with a malicious attachment can cause denial of service of the host machine running Cosign. This can impact other services on the machine that rely on having memory available such as a Redis database which can result in data loss. It can also impact the availability of other services on the machine that will not be available for the duration of the machine denial. The root cause of this issue is that Cosign reads the attachment from a remote image entirely into memory without checking the size of the attachment first. As such, a large attachment can make Cosign read a large attachment into memory; If the attachments size is larger than the machine has memory available, the machine will be denied of service. The Go runtime will make a SigKill after a few seconds of system-wide denial. This issue can allow a supply-chain escalation from a compromised registry to the Cosign user: If an attacher has compromised a registry or the account of an image vendor, they can include a malicious attachment and hurt the image consumer. Version 2.2.4 contains a patch for the vulnerability.",
        "cweIds": [
          {
            "id": "CWE-770",
            "description": "Allocation of Resources Without Limits or Throttling"
          }
        ],
        "references": [
          {
            "url": "https://github.com/google/go-containerregistry/blob/a0658aa1d0cc7a7f1bcc4a3af9155335b6943f40/pkg/v1/remote/layer.go#L36-L40"
          },
          {
            "url": "https://github.com/sigstore/cosign/blob/9bc3ee309bf35d2f6e17f5d23f231a3d8bf580bc/pkg/oci/remote/remote.go#L228-L239"
          },
          {
            "url": "https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e"
          },
          {
            "url": "https://github.com/sigstore/cosign/releases/tag/v2.2.4"
          },
          {
            "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-88jx-383q-w4qc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-29903",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-10T23:15:07.130",
        "lastModified": "2024-04-10T23:15:07.130",
        "baseScore": 4.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 0.5,
        "impactScore": 3.6,
        "description": "Cosign provides code signing and transparency for containers and binaries. Prior to version 2.2.4, maliciously-crafted software artifacts can cause denial of service of the machine running Cosign thereby impacting all services on the machine. The root cause is that Cosign creates slices based on the number of signatures, manifests or attestations in untrusted artifacts. As such, the untrusted artifact can control the amount of memory that Cosign allocates. The exact issue is Cosign allocates excessive memory on the lines that creates a slice of the same length as the manifests. Version 2.2.4 contains a patch for the vulnerability.",
        "cweIds": [
          {
            "id": "CWE-770",
            "description": "Allocation of Resources Without Limits or Throttling"
          }
        ],
        "references": [
          {
            "url": "https://github.com/sigstore/cosign/blob/14795db16417579fac0c00c11e166868d7976b61/pkg/cosign/verify.go#L948-L955"
          },
          {
            "url": "https://github.com/sigstore/cosign/blob/286a98a4a99c1b2f32f84b0d560e324100312280/pkg/oci/remote/signatures.go#L56-L70"
          },
          {
            "url": "https://github.com/sigstore/cosign/commit/629f5f8fa672973503edde75f84dcd984637629e"
          },
          {
            "url": "https://github.com/sigstore/cosign/releases/tag/v2.2.4"
          },
          {
            "url": "https://github.com/sigstore/cosign/security/advisories/GHSA-95pr-fxf5-86gv"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-30728",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-10T23:15:07.317",
        "lastModified": "2024-04-10T23:15:07.317",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "An issue was discovered in the default configurations of ROS (Robot Operating System) Kinetic Kame ROS_VERSION 1 and ROS_ PYTHON_VERSION 3, allows unauthenticated attackers to gain access using default credentials.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/yashpatelphd/CVE-2024-30728"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-32001",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-10T23:15:07.363",
        "lastModified": "2024-04-10T23:15:07.363",
        "baseScore": 2.2,
        "baseSeverity": "LOW",
        "exploitabilityScore": 0.7,
        "impactScore": 1.4,
        "description": "SpiceDB is a graph database purpose-built for storing and evaluating access control data. Use of a relation of the form: `relation folder: folder | folder#parent` with an arrow such as `folder->view` can cause LookupSubjects to only return the subjects found under subjects for either `folder` or `folder#parent`. This bug only manifests if the same subject type is used multiple types in a relation, relationships exist for both subject types and an arrow is used over the relation. Any user making a negative authorization decision based on the results of a LookupSubjects request with version before v1.30.1 is affected. Version 1.30.1 contains a patch for the issue. As a workaround, avoid using LookupSubjects for negative authorization decisions and/or avoid using the broken schema.",
        "cweIds": [
          {
            "id": "CWE-755",
            "description": "Improper Handling of Exceptional Conditions"
          }
        ],
        "references": [
          {
            "url": "https://github.com/authzed/spicedb/commit/a244ed1edfaf2382711dccdb699971ec97190c7b"
          },
          {
            "url": "https://github.com/authzed/spicedb/releases/tag/v1.30.1"
          },
          {
            "url": "https://github.com/authzed/spicedb/security/advisories/GHSA-j85q-46hg-36p2"
          }
        ]
      }
    }
  ]
}