{
  "totalResults": 5,
  "datePublished": "2024-04-06T01:00:05.282661Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2023-49965",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-05T14:15:10.423",
        "lastModified": "2024-04-05T14:15:10.423",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "SpaceX Starlink Wi-Fi router Gen 2 before 2023.48.0 allows XSS via the ssid and password parameters on the Setup Page.",
        "cweIds": null,
        "references": [
          {
            "url": "https://hackintoanetwork.com/blog/2023-starlink-router-gen2-xss-eng/"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31213",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-05T15:15:07.623",
        "lastModified": "2024-04-05T15:15:07.623",
        "baseScore": 3.5,
        "baseSeverity": "LOW",
        "exploitabilityScore": 2.1,
        "impactScore": 1.4,
        "description": "InstantCMS is a free and open source content management system. An open redirect was found in the ICMS2 application version 2.16.2 when being redirected after modifying one's own user profile. An attacker could trick a victim into visiting their web application, thinking they are still present on the ICMS2 application. They could then host a website stating \"To update your profile, please enter your password,\" upon which the user may type their password and send it to the attacker. As of time of publication, a patched version is not available.",
        "cweIds": [
          {
            "id": "CWE-601",
            "description": "URL Redirection to Untrusted Site ('Open Redirect')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/instantsoft/icms2/security/advisories/GHSA-6v3c-p92q-prfq"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31218",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-05T15:15:07.863",
        "lastModified": "2024-04-05T15:15:07.863",
        "baseScore": 9.8,
        "baseSeverity": "CRITICAL",
        "exploitabilityScore": 3.9,
        "impactScore": 5.9,
        "description": "Webhood is a self-hosted URL scanner used analyzing phishing and malicious sites. Webhood's backend container images in versions 0.9.0 and earlier are subject to Missing Authentication for Critical Function vulnerability. This vulnerability allows an unauthenticated attacker to send a HTTP request to the database (Pocketbase) admin API to create an admin account. The Pocketbase admin API does not check for authentication/authorization when creating an admin account when no admin accounts have been added. In its default deployment, Webhood does not create a database admin account. Therefore, unless users have manually created an admin account in the database, an admin account will not exist in the deployment and the deployment is vulnerable. Versions starting from 0.9.1 are patched. The patch creates a randomly generated admin account if admin accounts have not already been created i.e. the vulnerability is exploitable in the deployment. As a workaround, users can disable access to URL path starting with `/api/admins` entirely. With this workaround, the vulnerability is not exploitable via network.",
        "cweIds": [
          {
            "id": "CWE-306",
            "description": "Missing Authentication for Critical Function"
          }
        ],
        "references": [
          {
            "url": "https://github.com/webhood-io/webhood/commit/735e7fa2814edeec9a2c07778ed51b3c018609f9"
          },
          {
            "url": "https://github.com/webhood-io/webhood/security/advisories/GHSA-h533-rxhm-73j2"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31220",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-04-05T15:15:08.060",
        "lastModified": "2024-04-05T15:15:08.060",
        "baseScore": 7.3,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.4,
        "description": "Sunshine is a self-hosted game stream host for Moonlight. Starting in version 0.16.0 and prior to version 0.18.0, an attacker may be able to remotely read arbitrary files without authentication due to a path traversal vulnerability. Users who exposed the Sunshine configuration web user interface outside of localhost may be affected, depending on firewall configuration. To exploit vulnerability, attacker could make an http/s request to the `node_modules` endpoint if user exposed Sunshine config web server to internet or attacker is on the LAN. Version 0.18.0 contains a patch for this issue. As a workaround, one may block access to Sunshine via firewall.",
        "cweIds": [
          {
            "id": "CWE-22",
            "description": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/LizardByte/Sunshine/releases/tag/v0.18.0"
          },
          {
            "url": "https://github.com/LizardByte/Sunshine/security/advisories/GHSA-6rg7-7m3w-w5wc"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-31852",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-04-05T15:15:08.270",
        "lastModified": "2024-04-05T15:15:08.270",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "LLVM before 18.1.3 generates code in which the LR register can be overwritten without data being saved to the stack, and thus there can sometimes be an exploitable error in the flow of control. This affects the ARM backend and can be demonstrated with Clang. NOTE: the vendor perspective is \"we don't have strong objections for a CVE to be created ... It does seem that the likelihood of this miscompile enabling an exploit remains very low, because the miscompile resulting in this JOP gadget is such that the function is most likely to crash on most valid inputs to the function. So, if this function is covered by any testing, the miscompile is most likely to be discovered before the binary is shipped to production.\"",
        "cweIds": null,
        "references": [
          {
            "url": "https://bugs.chromium.org/p/llvm/issues/detail?id=69"
          },
          {
            "url": "https://github.com/llvm/llvm-project/issues/80287"
          },
          {
            "url": "https://github.com/llvmbot/llvm-project/commit/0e16af8e4cf3a66ad5d078d52744ae2776f9c4b2"
          },
          {
            "url": "https://llvm.org/docs/Security.html"
          }
        ]
      }
    }
  ]
}