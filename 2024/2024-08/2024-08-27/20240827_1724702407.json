{
  "totalResults": 4,
  "datePublished": "2024-08-27T05:00:07.889005Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-42913",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-08-26T18:15:07.283",
        "lastModified": "2024-08-26T19:10:09.607",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "RuoYi CMS v4.7.9 was discovered to contain a SQL injection vulnerability via the job_id parameter at /sasfs1.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/yangzongzhuan/RuoYi"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-45265",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-08-26T18:15:07.380",
        "lastModified": "2024-08-26T19:10:09.607",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "A SQL injection vulnerability in the poll component in SkySystem Arfa-CMS before 5.1.3124 allows remote attackers to execute arbitrary SQL commands via the psid parameter.",
        "cweIds": null,
        "references": [
          {
            "url": "https://github.com/TheHermione/CVE-2024-45265"
          },
          {
            "url": "https://skyss.ru"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-43802",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-08-26T19:15:07.943",
        "lastModified": "2024-08-26T19:15:07.943",
        "baseScore": 4.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.0,
        "impactScore": 3.4,
        "description": "Vim is an improved version of the unix vi text editor. When flushing the typeahead buffer, Vim moves the current position in the typeahead buffer but does not check whether there is enough space left in the buffer to handle the next characters.  So this may lead to the tb_off position within the typebuf variable to point outside of the valid buffer size, which can then later lead to a heap-buffer overflow in e.g. ins_typebuf(). Therefore, when flushing the typeahead buffer, check if there is enough space left before advancing the off position. If not, fall back to flush current typebuf contents. It's not quite clear yet, what can lead to this situation. It seems to happen when error messages occur (which will cause Vim to flush the typeahead buffer) in comnination with several long mappgins and so it may eventually move the off position out of a valid buffer size. Impact is low since it is not easily reproducible and requires to have several mappings active and run into some error condition. But when this happens, this will cause a crash. The issue has been fixed as of Vim patch v9.1.0697. Users are advised to upgrade. There are no known workarounds for this issue.",
        "cweIds": [
          {
            "id": "CWE-122",
            "description": "Heap-based Buffer Overflow"
          }
        ],
        "references": [
          {
            "url": "https://github.com/vim/vim/commit/322ba9108612bead5eb"
          },
          {
            "url": "https://github.com/vim/vim/security/advisories/GHSA-4ghr-c62x-cqfh"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-43806",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-08-26T19:15:08.190",
        "lastModified": "2024-08-26T19:15:08.190",
        "baseScore": 6.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 3.6,
        "description": "Rustix is a set of safe Rust bindings to POSIX-ish APIs. When using `rustix::fs::Dir` using the `linux_raw` backend, it's possible for the iterator to \"get stuck\" when an IO error is encountered. Combined with a memory over-allocation issue in `rustix::fs::Dir::read_more`, this can cause quick and unbounded memory explosion (gigabytes in a few seconds if used on a hot path) and eventually lead to an OOM crash of the application. The symptoms were initially discovered in https://github.com/imsnif/bandwhich/issues/284. That post has lots of details of our investigation. Full details can be read on the GHSA-c827-hfw6-qwvm repo advisory. If a program tries to access a directory with its file descriptor after the file has been unlinked (or any other action that leaves the `Dir` iterator in the stuck state), and the implementation does not break after seeing an error, it can cause a memory explosion. As an example, Linux's various virtual file systems (e.g. `/proc`, `/sys`) can contain directories that spontaneously pop in and out of existence. Attempting to iterate over them using `rustix::fs::Dir` directly or indirectly (e.g. with the `procfs` crate) can trigger this fault condition if the implementation decides to continue on errors. An attacker knowledgeable about the implementation details of a vulnerable target can therefore try to trigger this fault condition via any one or a combination of several available APIs. If successful, the application host will quickly run out of memory, after which the application will likely be terminated by an OOM killer, leading to denial of service. This issue has been addressed in release versions 0.35.15, 0.36.16, 0.37.25, and 0.38.19. Users are advised to upgrade. There are no known workarounds for this issue.",
        "cweIds": [
          {
            "id": "CWE-400",
            "description": "Uncontrolled Resource Consumption"
          }
        ],
        "references": [
          {
            "url": "https://github.com/bytecodealliance/rustix/security/advisories/GHSA-c827-hfw6-qwvm"
          },
          {
            "url": "https://github.com/imsnif/bandwhich/issues/284"
          }
        ]
      }
    }
  ]
}