{
  "totalResults": 9,
  "datePublished": "2024-06-22T15:00:10.995516Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-5965",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-06-22T04:15:12.460",
        "lastModified": "2024-06-22T04:15:12.460",
        "baseScore": 6.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.1,
        "impactScore": 2.7,
        "description": "The Mosaic theme for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘link’ parameter within the theme's Button shortcode in all versions up to, and including, 1.7.1 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with Contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.",
        "cweIds": null,
        "references": [
          {
            "url": "https://themes.trac.wordpress.org/browser/mosaic/1.7.1/shortcodes.php#L165"
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/6921da1b-e63d-479a-9786-9b1bd8201d69?source=cve"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-5966",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-06-22T04:15:12.940",
        "lastModified": "2024-06-22T04:15:12.940",
        "baseScore": 6.4,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 3.1,
        "impactScore": 2.7,
        "description": "The Grey Opaque theme for WordPress is vulnerable to Stored Cross-Site Scripting via the ‘url’ parameter within the theme's Download-Button shortcode in all versions up to, and including, 2.0.1 due to insufficient input sanitization and output escaping. This makes it possible for authenticated attackers, with Contributor-level access and above, to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page.",
        "cweIds": null,
        "references": [
          {
            "url": "https://themes.trac.wordpress.org/browser/grey-opaque/2.0.1/functions-shortcodes.php#L34"
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/2f4888e1-98b3-48d9-a2d8-416eae447a32?source=cve"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-21514",
        "sourceIdentifier": "report@snyk.io",
        "published": "2024-06-22T05:15:09.637",
        "lastModified": "2024-06-22T05:15:09.637",
        "baseScore": 7.4,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.2,
        "impactScore": 5.2,
        "description": "This affects versions of the package opencart/opencart from 0.0.0. An SQL Injection issue was identified in the Divido payment extension for OpenCart, which is included by default in version 3.0.3.9. As an anonymous unauthenticated user, if the Divido payment module is installed (it does not have to be enabled), it is possible to exploit SQL injection to gain unauthorised access to the backend database. For any site which is vulnerable, any unauthenticated user could exploit this to dump the entire OpenCart database, including customer PII data.",
        "cweIds": [
          {
            "id": "CWE-89",
            "description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/opencart/opencart/blob/3.0.3.9/upload/catalog/model/extension/payment/divido.php%23L114"
          },
          {
            "url": "https://github.com/opencart/opencart/commit/46bd5f5a8056ff9aad0aa7d71729c4cf593d67e2"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-PHP-OPENCARTOPENCART-7266565"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-21515",
        "sourceIdentifier": "report@snyk.io",
        "published": "2024-06-22T05:15:10.730",
        "lastModified": "2024-06-22T05:15:10.730",
        "baseScore": 4.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 2.5,
        "description": "This affects versions of the package opencart/opencart from 4.0.0.0. A reflected XSS issue was identified in the filename parameter of the admin tool/log route. An attacker could obtain a user's token by tricking the user to click on a maliciously crafted URL. The user is then prompted to login and redirected again upon authentication with the payload automatically executing. If the attacked user has admin privileges, this vulnerability could be used as the start of a chain of exploits like Zip Slip or arbitrary file write vulnerabilities in the admin functionality.\n**Notes:**\n1) This is only exploitable if the attacker knows the name or path of the admin directory. The name of the directory is \"admin\" by default but there is a pop-up in the dashboard warning users to rename it.\n2) The fix for this vulnerability is incomplete. The redirect is removed so that it is not possible for an attacker to control the redirect post admin login anymore, but it is still possible to exploit this issue in admin if the user is authenticated as an admin already.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/opencart/opencart/commit/c546199e8f100c1f3797a7a9d3cf4db1887399a2"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-PHP-OPENCARTOPENCART-7266573"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-21516",
        "sourceIdentifier": "report@snyk.io",
        "published": "2024-06-22T05:15:10.967",
        "lastModified": "2024-06-22T05:15:10.967",
        "baseScore": 4.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 2.5,
        "description": "This affects versions of the package opencart/opencart from 4.0.0.0. A reflected XSS issue was identified in the directory parameter of admin common/filemanager.list route. An attacker could obtain a user's token by tricking the user to click on a maliciously crafted URL. The user is then prompted to login and redirected again upon authentication with the payload automatically executing. If the attacked user has admin privileges, this vulnerability could be used as the start of a chain of exploits like Zip Slip or arbitrary file write vulnerabilities in the admin functionality.\n**Notes:**\n1) This is only exploitable if the attacker knows the name or path of the admin directory. The name of the directory is \"admin\" by default but there is a pop-up in the dashboard warning users to rename it.\n2) The fix for this vulnerability is incomplete. The redirect is removed so that it is not possible for an attacker to control the redirect post admin login anymore, but it is still possible to exploit this issue in admin if the user is authenticated as an admin already.",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/opencart/opencart/commit/c546199e8f100c1f3797a7a9d3cf4db1887399a2"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-PHP-OPENCARTOPENCART-7266576"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-21517",
        "sourceIdentifier": "report@snyk.io",
        "published": "2024-06-22T05:15:11.173",
        "lastModified": "2024-06-22T05:15:11.173",
        "baseScore": 4.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.6,
        "impactScore": 2.5,
        "description": "This affects versions of the package opencart/opencart from 4.0.0.0. A reflected XSS issue was identified in the redirect parameter of customer account/login route. An attacker can inject arbitrary HTML and Javascript into the page response. As this vulnerability is present in the account functionality it could be used to target and attack customers of the OpenCart shop.\n**Notes:**\n1) The fix for this vulnerability is incomplete",
        "cweIds": [
          {
            "id": "CWE-79",
            "description": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/opencart/opencart/commit/0fd1ee4b6c94366bf3e5d3831a8336f3275d1860"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-PHP-OPENCARTOPENCART-7266577"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-21518",
        "sourceIdentifier": "report@snyk.io",
        "published": "2024-06-22T05:15:11.403",
        "lastModified": "2024-06-22T05:15:11.403",
        "baseScore": 7.2,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 1.2,
        "impactScore": 5.9,
        "description": "This affects versions of the package opencart/opencart from 4.0.0.0. A Zip Slip issue was identified via the marketplace installer due to improper sanitization of the target path, allowing files within a malicious archive to traverse the filesystem and be extracted to arbitrary locations. An attacker can create arbitrary files in the web root of the application and overwrite other existing files by exploiting this vulnerability.",
        "cweIds": [
          {
            "id": "CWE-29",
            "description": "Path Traversal: '\\..\\filename'"
          }
        ],
        "references": [
          {
            "url": "https://github.com/opencart/opencart/blob/04c1724370ab02967d3b4f668c1b67771ecf1ff4/upload/admin/controller/marketplace/installer.php%23L383C1-L383C1"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-PHP-OPENCARTOPENCART-7266578"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-21519",
        "sourceIdentifier": "report@snyk.io",
        "published": "2024-06-22T05:15:11.620",
        "lastModified": "2024-06-22T05:15:11.620",
        "baseScore": 6.6,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 0.7,
        "impactScore": 5.9,
        "description": "This affects versions of the package opencart/opencart from 4.0.0.0. An Arbitrary File Creation issue was identified via the database restoration functionality. By injecting PHP code into the database, an attacker with admin privileges can create a backup file with an arbitrary filename (including the extension), within /system/storage/backup.\n**Note:**\nIt is less likely for the created file to be available within the web root, as part of the security recommendations for the application suggest moving the storage path outside of the web root.",
        "cweIds": [
          {
            "id": "CWE-20",
            "description": "Improper Input Validation"
          }
        ],
        "references": [
          {
            "url": "https://github.com/opencart/opencart/blob/master/upload/admin/controller/tool/upload.php%23L353"
          },
          {
            "url": "https://security.snyk.io/vuln/SNYK-PHP-OPENCARTOPENCART-7266579"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-4874",
        "sourceIdentifier": "security@wordfence.com",
        "published": "2024-06-22T05:15:11.837",
        "lastModified": "2024-06-22T05:15:11.837",
        "baseScore": 4.3,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.8,
        "impactScore": 1.4,
        "description": "The Bricks Builder plugin for WordPress is vulnerable to Insecure Direct Object Reference in all versions up to, and including, 1.9.8 via the postId parameter due to missing validation on a user controlled key. This makes it possible for authenticated attackers, with Contributor-level access and above, to modify posts and pages created by other users including admins. As a requirement for this, an admin would have to enable access to the editor specifically for such a user or enable it for all users with a certain user account type.",
        "cweIds": null,
        "references": [
          {
            "url": "https://bricksbuilder.io/release/bricks-1-9-9/#access-control-fix-for-user-role-contributor"
          },
          {
            "url": "https://www.wordfence.com/threat-intel/vulnerabilities/id/6d63e898-43e5-42b5-96b6-1453352e0cae?source=cve"
          }
        ]
      }
    }
  ]
}