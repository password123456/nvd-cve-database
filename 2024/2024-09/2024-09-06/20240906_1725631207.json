{
  "totalResults": 7,
  "datePublished": "2024-09-06T23:00:07.385570Z",
  "vulnerabilities": [
    {
      "cve": {
        "id": "CVE-2024-1744",
        "sourceIdentifier": "iletisim@usom.gov.tr",
        "published": "2024-09-06T13:15:03.467",
        "lastModified": "2024-09-06T16:46:47.907",
        "baseScore": null,
        "baseSeverity": null,
        "exploitabilityScore": null,
        "impactScore": null,
        "description": "Exposure of Sensitive Information to an Unauthorized Actor vulnerability in Ariva Computer Accord ORS allows Retrieve Embedded Sensitive Data.This issue affects Accord ORS: before 7.3.2.1.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://www.usom.gov.tr/bildirim/tr-24-1408"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-44739",
        "sourceIdentifier": "cve@mitre.org",
        "published": "2024-09-06T13:15:04.323",
        "lastModified": "2024-09-06T16:46:47.907",
        "baseScore": 8.8,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 2.8,
        "impactScore": 5.9,
        "description": "Sourcecodester Simple Forum Website v1.0 has a SQL injection vulnerability in /php-sqlite-forum/?page=manage_user&id=.",
        "cweIds": [
          {
            "id": "CWE-89",
            "description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/zach341/Cve_report/blob/main/simple-forum-website/SQLi-1.md"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-45039",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-09-06T13:15:04.400",
        "lastModified": "2024-09-06T16:46:26.830",
        "baseScore": 6.2,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.5,
        "impactScore": 3.6,
        "description": "gnark is a fast zk-SNARK library that offers a high-level API to design circuits. Versions prior to 0.11.0 have a soundness issue - in case of multiple commitments used inside the circuit the prover is able to choose all but the last commitment. As gnark uses the commitments for optimized non-native multiplication, lookup checks etc. as random challenges, then it could impact the soundness of the whole circuit. However, using multiple commitments has been discouraged due to the additional cost to the verifier and it has not been supported in the recursive in-circuit Groth16 verifier and Solidity verifier. gnark's maintainers expect the impact of the issue be very small - only for the users who have implemented the native Groth16 verifier or are using it with multiple commitments. We do not have information of such users. The issue has been patched in version 0.11.0. As a workaround, users should follow gnark maintainers' recommendation to use only a single commitment and then derive in-circuit commitments as needed using the `std/multicommit` package.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://github.com/Consensys/gnark/commit/e7c66b000454f4d2a4ae48c005c34154d4cfc2a2"
          },
          {
            "url": "https://github.com/Consensys/gnark/security/advisories/GHSA-q3hw-3gm4-w5cr"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-45040",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-09-06T13:15:04.893",
        "lastModified": "2024-09-06T16:46:26.830",
        "baseScore": 5.9,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 2.2,
        "impactScore": 3.6,
        "description": "gnark is a fast zk-SNARK library that offers a high-level API to design circuits. Prior to version 0.11.0, commitments to private witnesses in Groth16 as implemented break the zero-knowledge property. The vulnerability affects only Groth16 proofs with commitments. Notably, PLONK proofs are not affected. The vulnerability affects the zero-knowledge property of the proofs - in case the witness (secret or internal) values are small, then the attacker may be able to enumerate all possible choices to deduce the actual value. If the possible choices for the variables to be committed is large or there are many values committed, then it would be computationally infeasible to enumerate all valid choices. It doesn't affect the completeness/soundness of the proofs. The vulnerability has been fixed in version 0.11.0. The patch to fix the issue is to add additional randomized value to the list of committed value at proving time to mask the rest of the values which were committed. As a workaround, the user can manually commit to a randomized value.",
        "cweIds": [
          {
            "id": "CWE-200",
            "description": "Exposure of Sensitive Information to an Unauthorized Actor"
          }
        ],
        "references": [
          {
            "url": "https://github.com/Consensys/gnark/commit/afda68a38acca37becb8ba6d8982d03fee9559a0"
          },
          {
            "url": "https://github.com/Consensys/gnark/pull/1245"
          },
          {
            "url": "https://github.com/Consensys/gnark/security/advisories/GHSA-9xcg-3q8v-7fq6"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-45299",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-09-06T13:15:05.253",
        "lastModified": "2024-09-06T16:46:26.830",
        "baseScore": 6.5,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 1.2,
        "impactScore": 5.2,
        "description": "alf.io is an open source ticket reservation system for conferences, trade shows, workshops, and meetups. Prior to version 2.0-M5, the preloaded data as json is not escaped correctly, the administrator / event admin could break their own install by inserting non correctly escaped text. The Content-Security-Policy directive blocks any potential script execution. The administrator or event administrator can override the texts for customization purpose. The texts are not properly escaped. Version 2.0-M5 fixes this issue.",
        "cweIds": [
          {
            "id": "CWE-116",
            "description": "Improper Encoding or Escaping of Output"
          }
        ],
        "references": [
          {
            "url": "https://github.com/alfio-event/alf.io/commit/e7131c588f4ac31067a41d0e31e6a6a721b2ff4b"
          },
          {
            "url": "https://github.com/alfio-event/alf.io/security/advisories/GHSA-mcx6-25f8-8rqw"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-45300",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-09-06T13:15:05.537",
        "lastModified": "2024-09-06T16:46:26.830",
        "baseScore": 7.5,
        "baseSeverity": "HIGH",
        "exploitabilityScore": 3.9,
        "impactScore": 3.6,
        "description": "alf.io is an open source ticket reservation system for conferences, trade shows, workshops, and meetups. Prior to version 2.0-M5, a race condition allows the user to bypass the limit on the number of promo codes and use the discount coupon multiple times. In \"alf.io\", an event organizer can apply price discounts by using promo codes to your events. The organizer can limit the number of promo codes that will be used for this, but the time-gap between checking the number of codes and restricting the use of the codes allows a threat actor to bypass the promo code limit. Version 2.0-M5 fixes this issue.",
        "cweIds": [
          {
            "id": "CWE-362",
            "description": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')"
          }
        ],
        "references": [
          {
            "url": "https://github.com/alfio-event/alf.io/commit/53b3309e26e8acec6860d1e045df3046153a3245"
          },
          {
            "url": "https://github.com/alfio-event/alf.io/security/advisories/GHSA-67jg-m6f3-473g"
          }
        ]
      }
    },
    {
      "cve": {
        "id": "CVE-2024-45405",
        "sourceIdentifier": "security-advisories@github.com",
        "published": "2024-09-06T13:15:05.830",
        "lastModified": "2024-09-06T16:46:26.830",
        "baseScore": 6.0,
        "baseSeverity": "MEDIUM",
        "exploitabilityScore": 0.8,
        "impactScore": 5.2,
        "description": "`gix-path` is a crate of the `gitoxide` project (an implementation of `git` written in Rust) dealing paths and their conversions. Prior to version 0.10.11, `gix-path` runs `git` to find the path of a configuration file associated with the `git` installation, but improperly resolves paths containing unusual or non-ASCII characters, in rare cases enabling a local attacker to inject configuration leading to code execution. Version 0.10.11 contains a patch for the issue.\nIn `gix_path::env`, the underlying implementation of the `installation_config` and `installation_config_prefix` functions calls `git config -l --show-origin` to find the path of a file to treat as belonging to the `git` installation. Affected versions of `gix-path` do not pass `-z`/`--null` to cause `git` to report literal paths. Instead, to cover the occasional case that `git` outputs a quoted path, they attempt to parse the path by stripping the quotation marks. The problem is that, when a path is quoted, it may change in substantial ways beyond the concatenation of quotation marks. If not reversed, these changes can result in another valid path that is not equivalent to the original.\nOn a single-user system, it is not possible to exploit this, unless `GIT_CONFIG_SYSTEM` and `GIT_CONFIG_GLOBAL` have been set to unusual values or Git has been installed in an unusual way. Such a scenario is not expected. Exploitation is unlikely even on a multi-user system, though it is plausible in some uncommon configurations or use cases. In general, exploitation is more likely to succeed if users are expected to install `git` themselves, and are likely to do so in predictable locations; locations where `git` is installed, whether due to usernames in their paths or otherwise, contain characters that `git` quotes by default in paths, such as non-English letters and accented letters; a custom `system`-scope configuration file is specified with the `GIT_CONFIG_SYSTEM` environment variable, and its path is in an unusual location or has strangely named components; or a `system`-scope configuration file is absent, empty, or suppressed by means other than `GIT_CONFIG_NOSYSTEM`. Currently, `gix-path` can treat a `global`-scope configuration file as belonging to the installation if no higher scope configuration file is available. This increases the likelihood of exploitation even on a system where `git` is installed system-wide in an ordinary way. However, exploitation is expected to be very difficult even under any combination of those factors.",
        "cweIds": [
          {
            "id": "CWE-41",
            "description": "Improper Resolution of Path Equivalence"
          },
          {
            "id": "CWE-427",
            "description": "Uncontrolled Search Path Element"
          }
        ],
        "references": [
          {
            "url": "https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142"
          },
          {
            "url": "https://github.com/Byron/gitoxide/commit/650a1b5cf25e086197cc55a68525a411e1c28031"
          },
          {
            "url": "https://github.com/Byron/gitoxide/security/advisories/GHSA-m8rp-vv92-46c7"
          }
        ]
      }
    }
  ]
}